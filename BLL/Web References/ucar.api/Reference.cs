//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
// 
#pragma warning disable 1591

namespace BitAuto.CarChannel.BLL.ucar.api {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CarSourceForBitAutoSoap", Namespace="")]
    public partial class CarSourceForBitAuto : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCarSourceListByCityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarSourceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarSourceListByByMoreRegulationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealerCarSourceListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarSourceListForBitAutoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CarSourceForBitAuto() {
            this.Url = global::BitAuto.CarChannel.BLL.Properties.Settings.Default.BLL_cn_ucar_api_CarSourceForBitAuto;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCarSourceListByCityCompletedEventHandler GetCarSourceListByCityCompleted;
        
        /// <remarks/>
        public event GetCarSourceListCompletedEventHandler GetCarSourceListCompleted;
        
        /// <remarks/>
        public event GetCarSourceListByByMoreRegulationsCompletedEventHandler GetCarSourceListByByMoreRegulationsCompleted;
        
        /// <remarks/>
        public event GetDealerCarSourceListCompletedEventHandler GetDealerCarSourceListCompleted;
        
        /// <remarks/>
        public event GetCarSourceListForBitAutoCompletedEventHandler GetCarSourceListForBitAutoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetCarSourceListByCity", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCarSourceListByCity(int cityid, int countSize) {
            object[] results = this.Invoke("GetCarSourceListByCity", new object[] {
                        cityid,
                        countSize});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarSourceListByCityAsync(int cityid, int countSize) {
            this.GetCarSourceListByCityAsync(cityid, countSize, null);
        }
        
        /// <remarks/>
        public void GetCarSourceListByCityAsync(int cityid, int countSize, object userState) {
            if ((this.GetCarSourceListByCityOperationCompleted == null)) {
                this.GetCarSourceListByCityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarSourceListByCityOperationCompleted);
            }
            this.InvokeAsync("GetCarSourceListByCity", new object[] {
                        cityid,
                        countSize}, this.GetCarSourceListByCityOperationCompleted, userState);
        }
        
        private void OnGetCarSourceListByCityOperationCompleted(object arg) {
            if ((this.GetCarSourceListByCityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarSourceListByCityCompleted(this, new GetCarSourceListByCityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetCarSourceList", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCarSourceList(int sid, int cityid, int countSize) {
            object[] results = this.Invoke("GetCarSourceList", new object[] {
                        sid,
                        cityid,
                        countSize});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarSourceListAsync(int sid, int cityid, int countSize) {
            this.GetCarSourceListAsync(sid, cityid, countSize, null);
        }
        
        /// <remarks/>
        public void GetCarSourceListAsync(int sid, int cityid, int countSize, object userState) {
            if ((this.GetCarSourceListOperationCompleted == null)) {
                this.GetCarSourceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarSourceListOperationCompleted);
            }
            this.InvokeAsync("GetCarSourceList", new object[] {
                        sid,
                        cityid,
                        countSize}, this.GetCarSourceListOperationCompleted, userState);
        }
        
        private void OnGetCarSourceListOperationCompleted(object arg) {
            if ((this.GetCarSourceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarSourceListCompleted(this, new GetCarSourceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetCarSourceListByByMoreRegulations", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCarSourceListByByMoreRegulations(int sid, int cityid, int countSize, int orderType, int OrderDirection) {
            object[] results = this.Invoke("GetCarSourceListByByMoreRegulations", new object[] {
                        sid,
                        cityid,
                        countSize,
                        orderType,
                        OrderDirection});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarSourceListByByMoreRegulationsAsync(int sid, int cityid, int countSize, int orderType, int OrderDirection) {
            this.GetCarSourceListByByMoreRegulationsAsync(sid, cityid, countSize, orderType, OrderDirection, null);
        }
        
        /// <remarks/>
        public void GetCarSourceListByByMoreRegulationsAsync(int sid, int cityid, int countSize, int orderType, int OrderDirection, object userState) {
            if ((this.GetCarSourceListByByMoreRegulationsOperationCompleted == null)) {
                this.GetCarSourceListByByMoreRegulationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarSourceListByByMoreRegulationsOperationCompleted);
            }
            this.InvokeAsync("GetCarSourceListByByMoreRegulations", new object[] {
                        sid,
                        cityid,
                        countSize,
                        orderType,
                        OrderDirection}, this.GetCarSourceListByByMoreRegulationsOperationCompleted, userState);
        }
        
        private void OnGetCarSourceListByByMoreRegulationsOperationCompleted(object arg) {
            if ((this.GetCarSourceListByByMoreRegulationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarSourceListByByMoreRegulationsCompleted(this, new GetCarSourceListByByMoreRegulationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetDealerCarSourceList", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetDealerCarSourceList(int bid, int cityid, int countSize, string productIds) {
            object[] results = this.Invoke("GetDealerCarSourceList", new object[] {
                        bid,
                        cityid,
                        countSize,
                        productIds});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealerCarSourceListAsync(int bid, int cityid, int countSize, string productIds) {
            this.GetDealerCarSourceListAsync(bid, cityid, countSize, productIds, null);
        }
        
        /// <remarks/>
        public void GetDealerCarSourceListAsync(int bid, int cityid, int countSize, string productIds, object userState) {
            if ((this.GetDealerCarSourceListOperationCompleted == null)) {
                this.GetDealerCarSourceListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealerCarSourceListOperationCompleted);
            }
            this.InvokeAsync("GetDealerCarSourceList", new object[] {
                        bid,
                        cityid,
                        countSize,
                        productIds}, this.GetDealerCarSourceListOperationCompleted, userState);
        }
        
        private void OnGetDealerCarSourceListOperationCompleted(object arg) {
            if ((this.GetDealerCarSourceListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealerCarSourceListCompleted(this, new GetDealerCarSourceListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("/GetCarSourceListForBitAuto", RequestNamespace="", ResponseNamespace="", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCarSourceListForBitAuto(int MainBrandId, int Branid, int SerialId, int cityid, int countSize) {
            object[] results = this.Invoke("GetCarSourceListForBitAuto", new object[] {
                        MainBrandId,
                        Branid,
                        SerialId,
                        cityid,
                        countSize});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarSourceListForBitAutoAsync(int MainBrandId, int Branid, int SerialId, int cityid, int countSize) {
            this.GetCarSourceListForBitAutoAsync(MainBrandId, Branid, SerialId, cityid, countSize, null);
        }
        
        /// <remarks/>
        public void GetCarSourceListForBitAutoAsync(int MainBrandId, int Branid, int SerialId, int cityid, int countSize, object userState) {
            if ((this.GetCarSourceListForBitAutoOperationCompleted == null)) {
                this.GetCarSourceListForBitAutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarSourceListForBitAutoOperationCompleted);
            }
            this.InvokeAsync("GetCarSourceListForBitAuto", new object[] {
                        MainBrandId,
                        Branid,
                        SerialId,
                        cityid,
                        countSize}, this.GetCarSourceListForBitAutoOperationCompleted, userState);
        }
        
        private void OnGetCarSourceListForBitAutoOperationCompleted(object arg) {
            if ((this.GetCarSourceListForBitAutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarSourceListForBitAutoCompleted(this, new GetCarSourceListForBitAutoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCarSourceListByCityCompletedEventHandler(object sender, GetCarSourceListByCityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarSourceListByCityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarSourceListByCityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCarSourceListCompletedEventHandler(object sender, GetCarSourceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarSourceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarSourceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCarSourceListByByMoreRegulationsCompletedEventHandler(object sender, GetCarSourceListByByMoreRegulationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarSourceListByByMoreRegulationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarSourceListByByMoreRegulationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDealerCarSourceListCompletedEventHandler(object sender, GetDealerCarSourceListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealerCarSourceListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealerCarSourceListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCarSourceListForBitAutoCompletedEventHandler(object sender, GetCarSourceListForBitAutoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarSourceListForBitAutoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarSourceListForBitAutoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591