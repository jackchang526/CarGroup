<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BitAuto.Utils</name>
    </assembly>
    <members>
        <member name="T:BitAuto.Utils.Config.WebSites">
            <summary>
            单点登录站点集合配置处理节点
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonPlatformConfiurationSectionHandler.CommonConfig">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonPlatformConfiurationSectionHandler.CommonConfigs">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="T:BitAuto.Utils.Config.CommonConfig">
            <summary>
            公用平台配置类
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.CommonConfigBase">
            <summary>
            公用平台配置基类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonConfigBase.#ctor">
            <summary>
            缺省构造方法
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.ValidatecodeConfigRoot">
            <summary>
            验证码配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.UserManager">
            <summary>
            用户管理配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.BusinessCode">
            <summary>
            业务编码配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.Authoriaztion">
            <summary>
            授权管理配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.SingleSignOn">
            <summary>
            单点登录配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.FckEditor">
            <summary>
            FckEditor配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.CacheConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.SysLogConfig">
            <summary>
            系统日志配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.SQLSecurityConfig">
            <summary>
            SQL注入安全模块配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.PoliticsConfig">
            <summary>
            敏感词过滤配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.SessionConfig">
            <summary>
            Session配置，主要是配置负载均衡Session服务器
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.UrlCache">
            <summary>
            UrlCache配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfigBase.CdnConfig">
            <summary>
            Cdn管理平台配置节点
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonConfig.#ctor">
            <summary>
            缺省构造方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonConfig.#ctor(System.String)">
            <summary>
            根据key初始化
            </summary>
            <param name="key">配置名</param>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonConfig.Key">
            <summary>
            配置名
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Chinese.ChineseChar.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tone">声调</param>
            <param name="chinese">拼音输入码</param>
            <param name="pinyins">拼音</param>
        </member>
        <member name="M:BitAuto.Utils.Chinese.ChineseChar.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="spellexpress"></param>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Utils.Chinese.ChineseChar.Tone">
            <summary>
            声调
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Chinese.ChineseChar.Chinese">
            <summary>
             拼音输入码 
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Chinese.ChineseChar.Pinyins">
            <summary>
            拼音
            </summary>
        </member>
        <member name="M:BitAuto.Utils.WebUtil.GetClientIP">
            <summary>
            获取客户端IP,默认情况下使用Request.UserHostAddress即可.
            在透明代理，反向代理的情况,需要使用此方法，否则只会得到代理服务器IP       
            </summary>
            <returns>真实的客户端IP</returns>
        </member>
        <member name="M:BitAuto.Utils.WebUtil.GetClientIP(System.Web.HttpContext)">
            <summary>
            获取客户端IP,默认情况下使用Request.UserHostAddress即可.
            在透明代理，反向代理的情况,需要使用此方法，否则只会得到代理服务器IP       
            </summary>
            <param name="context">在HttpContext.Current还没有初始化的情况下，需要传入本参数</param>
            <returns>真实的客户端IP</returns>
        </member>
        <member name="M:BitAuto.Utils.WebUtil.IsIPAddress(System.String)">
             <summary>
             判断是否是IP地址格式  0.0.0.0
             </summary>
             <param  name="ipAddress">待判断的IP地址</param>
             <returns>true  or  false</returns>
        </member>
        <member name="T:BitAuto.Utils.Session.LoadBalancePartitionResolver">
            <summary>
            根据公用平台中的SessionConfig的配置把访问Session State Server的请求分配到不同的服务器上
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Session.LoadBalancePartitionResolver.m_StateServers">
            <summary>
            保存配置的Session State Server 地址
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Session.LoadBalancePartitionResolver.Initialize">
            <summary>
            初始化，本方法只是在应用声明周期内只执行一次
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Session.LoadBalancePartitionResolver.ResolvePartition(System.Object)">
            <summary>
            分配算法
            </summary>
            <param name="key">传入的SessionId</param>
            <returns>相应的Session State Server的地址</returns>
        </member>
        <member name="T:BitAuto.Utils.Data.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],BitAuto.Utils.Data.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:BitAuto.Utils.Data.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Data.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:BitAuto.Utils.Data.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:BitAuto.Utils.Data.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.CacheFilePathCreatorManager">
            <summary>
            缓存文件路径创建实现类管理器
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CacheFilePathCreatorManager.GetCacheFilePathCreator(System.String)">
            <summary>
            取得实现类
            </summary>
            <param name="typeName">类名</param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.FileHelper">
            <summary>
            对文件进行处理的类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.GetFileName(System.String)">
            <summary>
            得到文件名的方法
            </summary>
            <param name="str">完整文件名</param>
            <returns>文件名</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.CreateDirectory(System.String)">
            <summary>
            创建目录的方法
            </summary>
            <param name="path">要创建目录的路径</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.GetSuffix(System.String)">
            <summary>
            取扩展名的方法
            </summary>
            <param name="srcName">原来的名称</param>
            <returns>扩展名</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.BuildFileNameByTime(System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>
            <param name="_srcName">扩展名</param>
            <returns>根据时间生成的文件名</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.BuildFileNameByTime(System.String,System.String)">
            <summary>
            根据时间合成文件名的方法
            </summary>
            <param name="_srcName">扩展名</param>
            <param name="_tgtName">目标文件名。如果该参数为空，则文件名取当前时间</param>
            <returns>文件名</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.RemoveFile(System.String)">
            <summary>
            删除文件的方法
            </summary>
            <param name="_src">文件的长路径</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.ReNameFile(System.String,System.String)">
            <summary>
            重命名文件的方法
            </summary>
            <param name="_src">源文件路径</param>
            <param name="_newName">目标文件名（不改变后缀）</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.AppendFile(System.String,System.String)">
            <summary>
            往文件里追加内容的方法(采用系统默认的编码)
            </summary>
            <param name="_content">内容</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.AppendFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            往文件里追加内容的方法(编码采用参数指定的)
            </summary>
            <param name="_content">内容</param>
            <param name="path">文件路径</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.UpdateFile(System.String,System.String)">
            <summary>
            将内容写入文件中。如果目录和文件不存在则自动创建。如果原来文件已经存在，将自动覆盖(采用系统默认的编码)。
            </summary>
            <param name="_content">文件内容</param>
            <param name="path">文件路径</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.UpdateFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容写入文件中。如果目录和文件不存在则自动创建。如果原来文件已经存在，将自动覆盖(采用参数中指定的编码)。
            </summary>
            <param name="_content">文件内容</param>
            <param name="path">文件路径</param>
            <param name="encoding">编码</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.ReadFile(System.String)">
            <summary>
            读出模板数据的方法(采用系统默认的编码)
            </summary>
            <param name="__ModelPath">模板文件路径</param>
            <returns>读取的内容</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.ReadFile(System.String,System.Text.Encoding)">
            <summary>
            读出模板数据的方法(采用参数中指定的编码)
            </summary>
            <param name="__ModelPath">模板文件路径</param>
            <param name="encoding">编码</param>
            <returns>读取的内容</returns>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.FileDownload(System.String,System.String)">
            <summary>
            文件下载的方法(默认使用UTF-8编码)
            </summary>
            <param name="FullFileName">完整文件名</param>
            <param name="RealFileName">真实文件名</param>
        </member>
        <member name="M:BitAuto.Utils.FileHelper.FileDownload(System.String,System.String,System.Text.Encoding)">
            <summary>
            文件下载的方法(使用参数中指定的编码)
            </summary>
            <param name="FullFileName">完整文件名</param>
            <param name="RealFileName">真实文件名</param>
            <param name="encoding">编码</param>
        </member>
        <member name="T:BitAuto.Utils.Chs2py">
            <summary>
            汉字处理方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Chs2py.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Chs2py.GetFirstPyChar(System.Char)">
            <summary>
            取单个汉字的拼音首字母
            </summary>
            <param name="c">单个汉字</param>
            <returns>第一个拼音字母</returns>
        </member>
        <member name="M:BitAuto.Utils.Chs2py.GetFirstPyChar(System.String)">
            <summary>
            取单个汉字的拼音首字母
            </summary>
            <param name="strName">汉字字符串。如果输入多个汉字，只取第一个汉字的拼音首字母</param>
            <returns>第一个拼音字母</returns>
        </member>
        <member name="F:BitAuto.Utils.Chs2py.sCodeData">
            <summary> 
            难检字码表． 
            </summary> 
        </member>
        <member name="M:BitAuto.Utils.Chs2py.GetGB2312Code(System.String)">
            <summary>
            取汉字的Unicode编码
            </summary>
            <param name="s">汉字字符串。如果输入多个汉字，只对第一个汉字处理。</param>
            <returns>Unicode编码</returns>
        </member>
        <member name="M:BitAuto.Utils.Chs2py.GetGB2312Code(System.Char)">
            <summary>
            取汉字的Unicode编码
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Chs2py.GetFullChs2Py(System.String)">
            <summary>
            取汉字字符串的拼音
            </summary>
            <param name="chineseString">汉字字符串</param>
            <returns>拼音</returns>
        </member>
        <member name="T:BitAuto.Utils.Caching.CacheConfiguration">
            <summary>
             本类主要是从Web.Config或App.Config中读取缓存相关的配置，
             避免写类似ConfigurationSettings.AppSettings["ConfigKey"]的代码。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetConfigurationValue(System.String)">
            <summary>
            取得配置值
            </summary>
            <param name="configKey"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetConfigurationValue(System.String,System.Boolean)">
            <summary>
            取得配置值
            </summary>
            <param name="configKey">配置的Key</param>
            <param name="isThrowExceptionIfNotExist">当配置Key在配置文件中不存在是是否抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetTimespanOfPersistedObjectInSeconds">
            <summary>
            取得单个对象在内存中存在的时间跨度
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetTimespanOfPersistedObjectsInSeconds">
            <summary>
            取得对象数组在缓存中存在的时间跨度
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetTimespanOfNormalValueInSeconds">
            <summary>
            取得普通值在缓存中存在的时间跨度
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetTimespanOfInsertingObjectInSeconds">
            <summary>
            取得新增对象在缓存中存在的时间跨度
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheConfiguration.GetTimespanOfUpdatingObjectInSeconds">
            <summary>
            取得更新对象在缓存中存在的时间跨度
            </summary>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.ValidatecodeHttpHandler">
            <summary>
            Web.Config中需要进行类似如下的配置
            <![CDATA[
                <location path="ValidatecodeImg.aspx">
                    <system.web>
                        <httpHandlers>
                            <remove verb="*" path="ValidatecodeImg.aspx"/>
                            <add verb="GET,HEAD" path="ValidatecodeImg.aspx" type="BitAuto.Utils.ValidatecodeHttpHandler, BitAuto.Utils" validate="false"/>
                        </httpHandlers>
                        <authorization>
                            <allow users="*"/>
                        </authorization>
                    </system.web>
                </location>
            ]]>
            </summary>
        </member>
        <member name="T:BitAuto.Utils.ValidatecodeTool">
            <summary>
            验证码工具的使用接口
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage">
            <summary>
            输出验证码图片 
            参看OutputImage(string validateCodeName)方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage(System.String)">
            <summary>
            输出指定验证码名称的验证码图片,
            Web.Config中需要进行类似如下的配置
            <![CDATA[
                 <configSections>
                     <!--验证码的配置Section-->
                     <section name="BitAuto.Utils.ValidatecodeConfig" type="BitAuto.Utils.ValidatecodeConfigurationSectionHandler, BitAuto.Utils"/>
                 </configSections>
                 <!--DefaultValidatecodeName指定的名字在Validatecodes中必须存在-->
                 <BitAuto.Utils.ValidatecodeConfig DefaultValidatecodeName = "default">
                     <Validatecodes>
                         <!--
                             Width验证图片的宽度，
                             Height验证图片的高度，
                             FontName输出的字符的字体,服务器存在的字体名可以在"控制面板—>字体"中查到
                             FontSize字体大小,
                             IsDrawNoise是否画出干扰线，
                             CharCount指定画出的字符个数如果是0，则画出4——8的随机个数
                         -->
                         <add ValidatecodeName="default" Width="150" Height="40" FontName="" FontSize="30" IsDrawNoise="true" CharCount="4"></add>
                         <add ValidatecodeName="A" Width="200" Height="50" FontName="华文隶书" FontSize="50" IsDrawNoise="true" CharCount="0"></add>
                         <add ValidatecodeName="B" Width="250" Height="60" FontName="Times New Roman" FontSize="35" IsDrawNoise="true" CharCount="8"></add>
                     </Validatecodes>
                 </BitAuto.Utils.ValidatecodeConfig>
            ]]>
            </summary>
            
            <param name="validateCodeName">验证码名字，用于区分验证码</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            输出验证码图片
            </summary>
            <param name="width">验证图片的宽度</param>
            <param name="height">验证图片的高度</param>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况，不要重名</param>
            <param name="fontName">字体名称</param>
            <param name="fontSize">字体大小</param>
            <param name="isDrawNoise">是否生成干扰线</param>
            <param name="charCount">验证码字符位数</param>
            <param name="isUserNumber">是否使用数字</param>
            <param name="isDistorted">是否变形</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage(System.Boolean)">
            <summary>
            输出验证码图片 
            </summary>
            <param name="isDrawNoise">是否生成干扰线</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage(System.String,System.Boolean)">
            <summary>
            输出验证码图片 
            </summary>
            <param name="fontName">字体名称</param>
            <param name="isDrawNoise">是否生成干扰线</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.OutputImage(System.String,System.String,System.Boolean)">
            <summary>
            输出验证码图片 
            </summary>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况，不要重名</param>
            <param name="fontName">字体名称</param>
            <param name="isDrawNoise">是否生成干扰线</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.GetValidateCodeConfig">
            <summary>
            新配置上线后调用这个函数，取代旧的GetValidatecodeConfig()
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.ValidateInputcode(System.String)">
            <summary>
            验证输入的验证码是否相符，不区分大小写,
            参看ValidateInputcode(string validateCodeName, string code)方法
            </summary>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.Boolean)">
            <summary>
            验证输入的验证码是否相符，不区分大小写,
            参看ValidateInputcode(string validateCodeName, string code)方法
            </summary>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <param name="isClearCodeInSession">
            是否清除Session中的验证码，此参数最好传true，否则会引入安全漏洞；
            使用场景为：客户端验证时传false，服务器端验证时再传true。
            </param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.String)">
            <summary>
            验证输入的验证码是否相符，不区分大小写
            Web.Config中需要进行类似如下的配置
            <![CDATA[
                 <configSections>
                     <!--验证码的配置Section-->
                     <section name="BitAuto.Utils.ValidatecodeConfig" type="BitAuto.Utils.ValidatecodeConfigurationSectionHandler, BitAuto.Utils"/>
                 </configSections>
                 <!--DefaultValidatecodeName指定的名字在Validatecodes中必须存在-->
                 <BitAuto.Utils.ValidatecodeConfig DefaultValidatecodeName = "default">
                     <Validatecodes>
                         <!--
                             Width验证图片的宽度，
                             Height验证图片的高度，
                             FontName输出的字符的字体,服务器存在的字体名可以在"控制面板—>字体"中查到
                             FontSize字体大小,
                             IsDrawNoise是否画出干扰线，
                             CharCount指定画出的字符个数如果是0，则画出4——8的随机个数
                         -->
                         <add ValidatecodeName="default" Width="150" Height="40" FontName="" FontSize="30" IsDrawNoise="true" CharCount="4"></add>
                         <add ValidatecodeName="A" Width="200" Height="50" FontName="华文隶书" FontSize="50" IsDrawNoise="true" CharCount="0"></add>
                         <add ValidatecodeName="B" Width="250" Height="60" FontName="Times New Roman" FontSize="35" IsDrawNoise="true" CharCount="8"></add>
                     </Validatecodes>
                 </BitAuto.Utils.ValidatecodeConfig>
            ]]>
            </summary>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况</param>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <returns>校验结果，true——通过，false——不正确</returns>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeTool.ValidateInputcode(System.String,System.String,System.Boolean)">
            <summary>
            验证输入的验证码是否相符，不区分大小写
            Web.Config中需要进行类似如下的配置
            <![CDATA[
                 <configSections>
                     <!--验证码的配置Section-->
                     <section name="BitAuto.Utils.ValidatecodeConfig" type="BitAuto.Utils.ValidatecodeConfigurationSectionHandler, BitAuto.Utils"/>
                 </configSections>
                 <!--DefaultValidatecodeName指定的名字在Validatecodes中必须存在-->
                 <BitAuto.Utils.ValidatecodeConfig DefaultValidatecodeName = "default">
                     <Validatecodes>
                         <!--
                             Width验证图片的宽度，
                             Height验证图片的高度，
                             FontName输出的字符的字体,服务器存在的字体名可以在"控制面板—>字体"中查到
                             FontSize字体大小,
                             IsDrawNoise是否画出干扰线，
                             CharCount指定画出的字符个数如果是0，则画出4——8的随机个数
                         -->
                         <add ValidatecodeName="default" Width="150" Height="40" FontName="" FontSize="30" IsDrawNoise="true" CharCount="4"></add>
                         <add ValidatecodeName="A" Width="200" Height="50" FontName="华文隶书" FontSize="50" IsDrawNoise="true" CharCount="0"></add>
                         <add ValidatecodeName="B" Width="250" Height="60" FontName="Times New Roman" FontSize="35" IsDrawNoise="true" CharCount="8"></add>
                     </Validatecodes>
                 </BitAuto.Utils.ValidatecodeConfig>
            ]]>
            </summary>
            <param name="validateCodeName">验证码名称，用于同一页面支持多验证码的情况</param>
            <param name="code">用户输入的验证码，不区分大小写</param>
            <param name="isClearCodeInSession">
            是否清除Session中的验证码，此参数最好传true，否则可能会引入安全漏洞；
            使用场景为：客户端验证时传false，服务器端验证时再传true。
            </param>
            <returns>校验结果，true——通过，false——不正确</returns>
        </member>
        <member name="T:BitAuto.Utils.ValidatecodeImage">
            <summary>
            本类封装了验证码的生成算法.
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeImage.#ctor(System.Int32,System.Int32,System.String,System.Int32,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fontName">字体名称</param>
            <param name="fontSize">字体大小</param>
            <param name="isDrawNoise">是否画干扰线</param>
            <param name="charCount">字符个数</param>
            <param name="isUserNumber">是否使用数字</param>
            <param name="isDistorted">是否变形</param>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeImage.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeImage.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ValidatecodeImage.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:BitAuto.Utils.ValidatecodeImage.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitAuto.Utils.ValidatecodeImage.Image">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitAuto.Utils.ValidatecodeImage.Width">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitAuto.Utils.ValidatecodeImage.Height">
            <summary>
            
            </summary>
        </member>
        <member name="T:BitAuto.Utils.ExportDataHelper">
            <summary>
            数据导出为Excel或XML文件
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.String,System.Data.DataSet,BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.String,System.Data.DataSet,System.String[],BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>
            <param name="ds">源数据DataSet</param>
            <param name="cols">输出列</param>        
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.String[],System.Data.DataSet,BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字</param>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.String[],System.Data.DataSet,System.String[],BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="_caption">表头标题文字，以 | 分隔</param>        
            <param name="ds">源数据DataSet</param>
            <param name="cols">输出列</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.Data.DataSet,BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="ds">源数据DataSet</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToFile(System.Data.DataSet,System.String[],BitAuto.Utils.ExportFormat,System.String)">
            <summary>
            把DataSet导出到文件
            </summary>
            <param name="ds">源数据DataSet</param>
            <param name="cols">导出的列</param>
            <param name="ef">导出格式</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="M:BitAuto.Utils.ExportDataHelper.ExportDataSetToExcelWithTitle(System.String,System.String[],System.Data.DataSet,System.String[],System.String)">
            <summary>
            把DataSet导出到Excel文件,并带表头
            </summary>
            <param name="title">表头</param>
            <param name="_caption">标题</param>
            <param name="ds">源数据DataSet</param>
            <param name="cols">导出的列</param>
            <param name="FileName">导出的文件名</param>
        </member>
        <member name="T:BitAuto.Utils.ExportFormat">
            <summary>
            导出文件的类型
            </summary>
        </member>
        <member name="F:BitAuto.Utils.ExportFormat.ExcelFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:BitAuto.Utils.ExportFormat.XMLFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.UrlCache.UrlCachePagesConfig">
            <summary>
            跳转地址信息集合
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.UrlCache.UrlCachePagesConfig.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig">
            <summary>
            SQL注入安全类配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig.Enabled">
            <summary>
            是否使用安全模块执行过滤
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig.Keywords">
            <summary>
            敏感词列表,用|分开。此类敏感词用分词方式过滤。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig.Keychars">
            <summary>
            敏感词列表,用|分开。此类敏感词直接过滤。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig.SpecialPages">
            <summary>
            需要排除的url规则
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.SQLSecurity.SpecialPage">
            <summary>
            页面信息
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.SQLSecurity.SpecialPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SpecialPage.PageUrl">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SpecialPage.Enabled">
            <summary>
            该url是否检查
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SpecialPage.Keywords">
            <summary>
            敏感词列表，用|隔开
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SQLSecurity.SpecialPage.Keychars">
            <summary>
            敏感词列表,用|分开
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.SQLSecurity.SpecialPages">
            <summary>
            
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Data.SelectSqlBuilder">
            <summary>
            本类是一个工具类，功能是根据DataRow、DataTable对象生成Sql语句
            注意：只支持DataRow中属性类型如下：
            Boolean、Byte、Char、DateTime、Double、Int16、
            Int32、Int64、SByte、Single、String、TimeSpan、UInt16、UInt32、UInt64，
            只有这些类型的DataRow属性能作为条件生成Where子句，
            当DataRow数字类型属性为0时或DateTime类型的值为最小时间时，不会作为Where子句中的条件
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.SelectSqlBuilder.BuildSelectSql(System.Data.DataRow)">
            <summary>
            根据DataRow对象生成Select Sql语句
            </summary>
            <param name="row">DataRow对象</param>
            <returns>Select Sql语句</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SelectSqlBuilder.BuildSelectList(System.Data.DataTable)">
            <summary>
            生成Sql语句的Select List
            </summary>
            <param name="table">DataTable对象</param>
            <returns>Sql语句的Select List 字串</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SelectSqlBuilder.BuildSelectList(System.Data.DataTable,System.Boolean)">
            <summary>
            生成Sql语句的Select List，如果isChangeColumnName为true,
            则把表明作为Select List中字段别名的前缀，
            如table1.column1字段在Select List中的别名为：table1_column1
            </summary>
            <param name="table">DataTable对象</param>
            <param name="isChangeColumnName">是否把表名作为Select List中字段别名的前缀</param>
            <returns>Sql语句的Select List 字串</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SelectSqlBuilder.BuildWhere(System.Data.DataRow)">
            <summary>
            创建带参数的sql语句的where条件
            </summary>
            <param name="row">DataRow对象</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SelectSqlBuilder.BuildParameter(System.Data.DataRow)">
            <summary>
            	创建Where条件用到的sql参数，
            </summary>
            <param name="row">参数条件的具体值从此DataRow中取</param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.Data.SingleDataTableQuery">
            <summary>
            本辅助类利用SelectSqlBuilder类实现单个表的数据读取，
            调用方只需指定一个DataRow对象和数据库连接字符串就可以。
            注意：只支持DataRow中属性类型如下：
            Boolean、Byte、Char、DateTime、Double、Int16、
            Int32、Int64、SByte、Single、String、TimeSpan、UInt16、UInt32、UInt64，
            只有这些类型的DataRow属性能作为条件生成Where子句，
            当DataRow数字类型属性为0时或DateTime类型的值为最小时间时，不会作为Where子句中的条件，
            当你的DataRow对象只有一个数字类型且值为零时，并不能查询出该属性（字段）等于0的记录，
            而是查询出所有的记录。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.GetDataSet(System.String,System.Data.DataRow)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="paramRow">DataRow参数值</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.GetDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="paramRow">DataRow参数值</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.GetDataSet(System.String,System.Data.DataRow,System.String,System.Int32,System.Int32)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet,
            并且以orderSql、startRecord和maxRecords作为分页条件
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <param name="paramRow">DataRow参数值</param>
            <param name="orderSql">排序Sql子句</param>
            <param name="startRecord">起始记录号，最小值为0</param>
            <param name="maxRecords">一次返回的最大记录数</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.GetDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.String,System.Int32,System.Int32)">
            <summary>
            从数据库中取得满足参数paramRow中各值"与/and"条件的DataSet,
            并且以orderSql、startRecord和maxRecords作为分页条件
            </summary>
            <param name="connection">数据库连接对象</param>
            <param name="paramRow">DataRow参数值</param>
            <param name="orderSql">排序Sql子句</param>
            <param name="startRecord">起始记录号，最小值为0</param>
            <param name="maxRecords">一次返回的最大记录数</param>
            <returns>符合paramRow条件的DataSet</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataSet(System.String,System.Data.DataRow,System.Data.DataSet)">
            <summary>
            所有FillDataSet与GetDataSet方法功能相同，只是由调用方传入DataSet，而不是新建DataSet
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataSet(System.String,System.Data.DataRow,System.String,System.Int32,System.Int32,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="orderSql"></param>
            <param name="startRecord"></param>
            <param name="maxRecords"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataSet(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.String,System.Int32,System.Int32,System.Data.DataSet)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="orderSql"></param>
            <param name="startRecord"></param>
            <param name="maxRecords"></param>
            <param name="dataSet"></param>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataTable(System.String,System.Data.DataRow,System.Data.DataTable)">
            <summary>
            所有FillDataSet与GetDataSet方法功能相同，
            只是由调用方传入DataTable，把数据填入此DataTable
            </summary>
            <param name="connectionString"></param>
            <param name="paramRow"></param>
            <param name="dataTable"></param>
        </member>
        <member name="M:BitAuto.Utils.Data.SingleDataTableQuery.FillDataTable(System.Data.SqlClient.SqlConnection,System.Data.DataRow,System.Data.DataTable)">
            <summary>
            
            </summary>
            <param name="connection"></param>
            <param name="paramRow"></param>
            <param name="dataTable"></param>
        </member>
        <member name="T:BitAuto.Utils.MailHelper">
            <summary>
            发送邮件的类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.MailHelper.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
        </member>
        <member name="M:BitAuto.Utils.MailHelper.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[])">
            <summary>
            发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
            <param name="files">附件文件的集合</param>
        </member>
        <member name="M:BitAuto.Utils.MailHelper.SendAsyncEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String[],System.Object,System.Net.Mail.SendCompletedEventHandler)">
            <summary>
            异步发送邮件的方法
            </summary>
            <param name="strSmtpServer">邮件服务器地址</param>
            <param name="strFrom">发送地址</param>
            <param name="strFromPass">发送密码</param>
            <param name="strto">接收地址</param>
            <param name="strSubject">邮件主题</param>
            <param name="strBody">邮件内容</param>
            <param name="isHtmlFormat">邮件内容是否以html格式发送</param>
            <param name="files">附件文件的集合</param>
            <param name="userToken">一个用户定义对象，此对象将被传递给完成异步操作时所调用的方法。</param>
            <param name="onComplete">发送结束后的回调函数</param>
        </member>
        <member name="T:BitAuto.Utils.ControlHelper">
            <summary>
            处理绑定控件
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.Collections.ArrayList)">
            <summary>
            绑定下拉框的方法
            </summary>
            <param name="drop">下拉框</param>
            <param name="aList">数据集合</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.Data.DataSet)">
            <summary>
            绑定下拉框的方法
            </summary>
            <param name="drop">下拉框</param>
            <param name="ds">数据集</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindDropDownList(System.Web.UI.WebControls.DropDownList,System.Data.DataSet,System.String,System.String)">
            <summary>
            绑定下拉框的方法
            </summary>
            <param name="drop">下拉框</param>
            <param name="ds">数据集</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindRadioButtonList(System.Web.UI.WebControls.RadioButtonList,System.Collections.ArrayList)">
            <summary>
            绑定单选框列表的方法
            </summary>
            <param name="rbl">单选框列表</param>
            <param name="aList">数据集合</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindRadioButtonList(System.Web.UI.WebControls.RadioButtonList,System.Data.DataSet)">
            <summary>
            绑定单选框列表的方法
            </summary>
            <param name="rbl">单选框列表</param>
            <param name="ds">数据集</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindRadioButtonList(System.Web.UI.WebControls.RadioButtonList,System.Data.DataSet,System.String,System.String)">
            <summary>
            绑定单选框列表的方法
            </summary>
            <param name="rbl">单选框列表</param>
            <param name="ds">数据集</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.Collections.ArrayList)">
            <summary>
            绑定复选框列表的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <param name="aList">数据集合</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.Data.DataSet)">
            <summary>
            绑定复选框列表的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <param name="ds">数据集</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.BindCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.Data.DataSet,System.String,System.String)">
            <summary>
            绑定复选框列表的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <param name="ds">数据集</param>
            <param name="textField">文本字段</param>
            <param name="valueField">值字段</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.InitCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.String[])">
            <summary>
            初始化复选框列表的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <param name="strs">数据字符串数组</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.InitCheckBoxList(System.Web.UI.WebControls.CheckBoxList,System.String)">
            <summary>
            初始化复选框列表的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <param name="str">数据字符串</param>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.GetCheckBoxListValues(System.Web.UI.WebControls.CheckBoxList)">
            <summary>
            获取复选框列表值的方法
            </summary>
            <param name="cbl">复选框列表</param>
            <returns>复选框列表值</returns>
        </member>
        <member name="M:BitAuto.Utils.ControlHelper.IsDataSetHasData(System.Data.DataSet)">
            <summary>
            判断数据集是否有数据的方法
            </summary>
            <param name="ds">数据集</param>
            <returns>是否有数据</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.BusinessCodeConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.AuthoriaztionConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Security.SQLSecurity">
            <summary>
            SQL注入攻击检查类
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.SQLSecurity.HintMessageOnInject">
            <summary>
            当出现SQL注入攻击时的提示消息
            </summary>
        </member>
        <!-- 对于成员“M:BitAuto.Utils.Security.SQLSecurity.IsInject(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:BitAuto.Utils.Security.SQLSecurity.IsSqlInject(System.String)">
            <summary>
            检测字符串是否存在注入攻击
            </summary>
            <param name="strTextIn">要检测的字符串</param>
            <returns>
            	true——输入字符串存在Sql注入攻击
                false——输入字符串通过验证
            </returns>
        </member>
        <member name="T:BitAuto.Utils.Security.SQLInjectionException">
            <summary>
            当SQLSecurity.IsInject(string strTextIn)方法检查到不合法字符串时抛出异常的类型
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLInjectionException.#ctor">
            <summary>
            缺省构造方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLInjectionException.#ctor(System.String)">
            <summary>
            带消息参数的构造方法
            </summary>
            <param name="message">异常消息</param>
        </member>
        <member name="T:BitAuto.Utils.Security.SQLInjectionInfo">
            <summary>
            sql注入攻击信息
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Security.SQLInjectionInfo.Url">
            <summary>
            url
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Security.SQLInjectionInfo.Parameter">
            <summary>
            提交参数
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Security.SQLInjectionInfo.Keyword">
            <summary>
            关键词
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig">
            <summary>
            跳转地址信息
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="pageUrl"></param>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.PageUrl">
            <summary>
            填写要缓存页面的Url，相对于应用根路径的Url，不带参数，如：/a.aspx,/path/b.aspx,等，
            用户请求的完整Url（不包含Get参数）如果以此配置结尾，则进行缓存，
            所以同一应用下不能有两个页面的Url以此配置结尾，最好配置为相对于应用虚拟路径的Path
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.Enabled">
            <summary>
            是否启用，可以不配置，缺省为true。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.HtmlStoragePath">
            <summary>
            生成的Html静态内容的存放路径
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.VaryByParams">
            <summary>
            缓存页面的参数，根据其缓存页面的不同版本, "*" 代表所有的参数
            可以不配置，缺省值为空字符串""，表示该页面不按基于参数缓存不同版本。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.IgnoreOtherParams">
            <summary>
            是否忽略VaryByParams以外的其他参数，必须配置，
            false——存在VaryByParams以外的参数时页面继续执行，不启用缓存，
            true——VaryByParams以外的参数视为不存在，基于VaryByParams指定的参数缓存不同版本。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.UsingFileDependency">
            <summary>
            是否启用output缓存依赖，缺省为false，需要外部更新缓存文件才需要，主要用于静态化场景，
                                                                   即把本模块用于静态化，网站直接输出缓存的html文件，本模块根据传入的参数静态化aspx。
                                                                   false——不启用缓存文件依赖，
                                                                   true——启用缓存文件依赖，缓存依赖于文件，当生成的文件改变时outputcache缓存内容失效。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.Duration">
            <summary>
            缓存时间，单位为秒，当超过此时间，不强制重新生成缓存内容，
            而是返回已过期的内容，但另起线程开始刷新缓存。
            必需填值
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.MaxDuration">
            <summary>
            缓存的最大时间，单位为秒，当超过此时间，强制重新生成缓存内容。
            可为空，缺省值为最大整数
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCachePageConfig.CacheFilePathCreatorImpl">
            <summary>
            缓存文件路径创建实现类，当需要根据请求参数定制缓存文件所在位置时，
            要实现BitAuto.Utils.Caching.UrlCache.ICacheFilePathCreator接口，并在本属性中配置实现类名，
            缺省值为：“BitAuto.Utils.Caching.UrlCache.DefaultCacheFilePathCreator, BitAuto.Utils”
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.DefaultCacheFilePathCreator">
            <summary>
            缺省的缓存文件路径创建实现类
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.ICacheFilePathCreator">
            <summary>
            缺省的缓存文件路径创建接口，当需要根据请求参数定制缓存文件所在位置时，
            要实现本接口，并在配置文件中UrlCache——>UrlCachePages中的元素的CacheFilePathCreatorImple属性配置
            实现类的名称，缓存模块根据此配置加载实现类，以达到定制缓存文件的路径。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.ICacheFilePathCreator.CreateCacheFilePath(System.String,System.Web.HttpRequest,System.String[])">
            <summary>
            创建缓存文件路径
            </summary>
            <param name="cacheFileLocation">web.config中配置的缓存文件路径</param>
            <param name="httpRequest">请求对象</param>
            <param name="queryParamNames">
              参数名列表，缓存模块会根据这些参数缓存不同的版本，这个参数列表是根据VaryByParams配置的不同而不同，
              当VaryByParams为空字符串时，queryParamNames传入null，
              当VaryByParams为"*"时，queryParamNames为HttpContext.Current.Request.QueryString.AllKeys，
              其它情况时，queryParamNames为VaryByParams中配置的参数。
            </param>
            <returns>相应缓存文件的完整路径（包括文件名）</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.DefaultCacheFilePathCreator.CreateCacheFilePath(System.String,System.Web.HttpRequest,System.String[])">
            <summary>
            创建缓存文件路径
            </summary>
            <param name="cacheFileLocation">web.config中配置的缓存文件路径</param>
            <param name="httpRequest">请求对象</param>
            <param name="queryParamNames">参数名列表，缓存模块会根据这些参数缓存不同的版本</param>
            <returns>相应缓存文件的完整路径（包括文件名）</returns>
        </member>
        <member name="T:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum">
            <summary>
            日志级别枚举类型
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum.Fatal">
            <summary> 
            致命错误
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum.Error">
            <summary> 
            一般错误
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum.Warn">
            <summary> 
            警告
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum.Info">
            <summary> 
            一般信息
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.Services.SysLog.SysLogLevelEnum.Debug">
            <summary> 
            调试信息
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.CommonPlatformConfiguration">
            <summary>
            公用平台配置入口类
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Config.CommonPlatformConfiguration.instance">
            <summary>
            公用平台配置实例
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetValidatecodeConfigRoot">
            <summary>
            获得验证码配置
            </summary>
            <returns>验证码的配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetValidatecodeConfigRoot(System.String)">
            <summary>
            获得验证码配置
            </summary>
            <param name="configName"></param>
            <returns>验证码的配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetBusinessCodeConfig">
            <summary>
            获得businesscode服务配置
            </summary>
            <returns>业务编码配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetBusinessCodeConfig(System.String)">
            <summary>
            获得businesscode服务配置
            </summary>
            <param name="configName"></param>
            <returns>业务编码配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetUserManagerConfig">
            <summary>
            获得UserManager服务配置
            </summary>
            <returns>UserManager服务的配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetUserManagerConfig(System.String)">
            <summary>
            获得UserManager服务配置
            </summary>
            <param name="configName">配置名</param>
            <returns>UserManager服务的配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetAuthoriaztionConfig">
            <summary>
            获得授权服务配置
            </summary>
            <returns>授权服务配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetAuthoriaztionConfig(System.String)">
            <summary>
            获得授权服务配置
            </summary>
            <param name="configName">配置名</param>
            <returns>授权服务配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSingleSignOnConfig">
            <summary>
            获得单点登陆配置
            </summary>
            <returns>单点登录配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSingleSignOnConfig(System.String)">
            <summary>
            获得单点登陆配置
            </summary>
            <param name="configName">配置名</param>
            <returns>单点登录配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetFckEditorConfig">
            <summary>
            读取FckEditor配置
            </summary>
            <returns>FckEditor配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetFckEditorConfig(System.String)">
            <summary>
            读取FckEditor配置
            </summary>
            <param name="configName">配置名</param>
            <returns>FckEditor配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetCacheConfig">
            <summary>
            获取缓存配置
            </summary>
            <returns>缓存配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetCacheConfig(System.String)">
            <summary>
            获取缓存配置
            </summary>
            <param name="configName">配置名</param>
            <returns>缓存配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSysLogConfig">
            <summary>
            获取系统日志配置
            </summary>
            <returns>系统日志配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSysLogConfig(System.String)">
            <summary>
            获取系统日志配置
            </summary>
            <param name="configName">配置名</param>
            <returns>系统日志配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSQLSecurityConfig">
            <summary>
            读取SQLSecurityConfig配置
            </summary>
            <returns>安全配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSQLSecurityConfig(System.String)">
            <summary>
            读取SQLSecurityConfig配置
            </summary>
            <param name="configName">配置名</param>
            <returns>安全配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetPoliticsConfig">
            <summary>
            读取敏感词过滤配置
            </summary>
            <returns>敏感词配置类</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetPoliticsConfig(System.String)">
            <summary>
            读取敏感词过滤配置
            </summary>
            <param name="configName">配置名</param>
            <returns>敏感词配置类</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSessionConfig">
            <summary>
            读取Session配置
            </summary>
            <returns>Session配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetSessionConfig(System.String)">
            <summary>
            读取Session配置
            </summary>
            <param name="configName">配置名</param>
            <returns>Session配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetUrlCacheConfig">
            <summary>
            读取UrlCache配置
            </summary>
            <returns>UrlCache配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetCdnConfig">
            <summary>
            读取Cdn配置
            </summary>
            <returns>Cdn配置对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.CommonPlatformConfiguration.GetCdnConfig(System.String)">
            <summary>
            读取Cdn管理平台配置
            </summary>
            <param name="configName">配置名</param>
            <returns>Cdn配置对象</returns>
        </member>
        <member name="P:BitAuto.Utils.Config.CommonPlatformConfiguration.Instance">
            <summary>
            配置属性
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Chinese.ChineseProvider.LoadResource">
            <summary>
            加载资源文件
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Chinese.ChineseProvider.IsValidChar(System.String)">
            <summary>
            判断字符是否是中文字符
            </summary>
            <param name="chineseChar">中文字符</param>
            <returns>如果是，返回真。否则假</returns>
        </member>
        <member name="M:BitAuto.Utils.Chinese.ChineseProvider.GetPinyin(System.String)">
            <summary>
            获取字符对应的拼音
            </summary>
            <param name="chineseChar">中文字符</param>
            <returns>拼音</returns>
        </member>
        <member name="T:BitAuto.Utils.ImageTool">
            <summary>
            图片操作类。操作图片建议使用此类，不建议使用ImageHelper类。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.Mark(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例： Mark(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 10, 10, 40);
            </summary>
            <param name="srcPicFileFullName">源文件物理路径</param>
            <param name="markPicFileFullName">水印图物理路径</param>
            <param name="outPicFileFullName">输出文件物理路径</param>
            <param name="rightSpace">水印图在全图的右边距</param>
            <param name="bottomSpace">水印图在全图的下边距</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.Mark(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例：Mark(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 3, 4, 20, 10); 
            </summary>
            <param name="srcPicFileFullName">源文件物理路径</param>
            <param name="markPicFileFullName">水印图物理路径</param>
            <param name="outPicFileFullName">输出文件物理路径</param>
            <param name="rightSpacePercent">水印图右边距占全图宽度的百分比</param>
            <param name="bottomSpacePercnet">水印图下边距占全图高度的百分比</param>
            <param name="maskWidthSizePercent">水印图宽度占全图宽度的百分比</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.MakeSmallImage(System.String,System.String,System.Drawing.Size)">
            <summary>
            按照尺寸和压缩质量生成缩略图。需要指定缩略图绝对路径。使用默认的压缩质量。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="smallSize">缩略图尺寸</param> 
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.MakeSmallImage(System.String,System.String,System.Drawing.Size,System.Int32)">
            <summary>
            按照尺寸和压缩质量生成缩略图。需要指定缩略图绝对路径。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="smallSize">缩略图尺寸</param>
            <param name="quality">缩略图质量。赋值范围0－100。一般75能兼顾质量和图片大小。</param>
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.MakeSmallImage(System.String,System.String,System.Int32,BitAuto.Utils.ImageTool.LimitSideMode)">
            <summary>
            按照限制的边长和压缩质量生成缩略图。需要指定缩略图绝对路径。使用默认的压缩质量。
            如果图片的边长不大于指定的最大边长，直接拷贝原图作为缩略图。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="maxSideLength">最大边长</param>
            <param name="limitMode">最大边长限制模式：按照宽度，高度或最大边长。</param>       
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.MakeSmallImage(System.String,System.String,System.Int32,BitAuto.Utils.ImageTool.LimitSideMode,System.Int32)">
            <summary>
            按照限制的边长和压缩质量生成缩略图。需要指定缩略图绝对路径。
            如果图片的边长不大于指定的最大边长，直接拷贝原图作为缩略图。
            </summary>
            <param name="srcFileFullName">源图片url</param>
            <param name="disFileFullName">目的图片url</param>
            <param name="maxSideLength">最大边长</param>
            <param name="limitMode">最大边长限制模式：按照宽度，高度或最大边长。</param>
            <param name="quality">缩略图质量。赋值范围0－100。一般75能兼顾质量和图片大小。</param>
            <returns>生成成功返回true，失败返回false。</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageTool.MakeSmallImage(System.Drawing.Image,System.String,System.Drawing.Size,System.Int32)">
            <summary>
            按照尺寸和压缩质量生成缩略图
            </summary>
            <param name="srcImage">源图片</param>
            <param name="disFileFullName"></param>
            <param name="smallSize"></param>
            <param name="quality"></param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.ImageTool.LimitSideMode">
            <summary>
            生成缩略图时的最大边长限制模式：按照宽度，高度或最大边长。
            </summary>
        </member>
        <member name="F:BitAuto.Utils.ImageTool.LimitSideMode.Width">
            <summary>
            宽度固定
            </summary>
        </member>
        <member name="F:BitAuto.Utils.ImageTool.LimitSideMode.Height">
            <summary>
            高度固定
            </summary>
        </member>
        <member name="F:BitAuto.Utils.ImageTool.LimitSideMode.Auto">
            <summary>
            按照最大边长
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.IsUseLog4net">
            <summary>
            本地Log4net记录Info、Debug信息
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.DefaultLogProjectName">
            <summary>
            当isUseLog4net为false时，本属性指定日志要记录到的项目名，如果为null，则根据Url判断项目名
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.LogConfigNameInLog4net">
            <summary>
            当isUseLog4net为true时，本属性指定log4net配置中用到的配置名
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.LogLevel">
            <summary>
            控制记录的日志级别，小于该级别的日志将不被记录。
            有效的值如下，级别依次降低：Fatal、Error、Warn、Info、Debug。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Services.SysLog.SysLogConfig.IsLogWebContext">
            <summary>
            当用于Web应用中时，是否记录发生异常时的ClientMessage、ServerMessage、SessionMessage，
            由于这些信息比较大，正常情况下应该设为false
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.ICacheVersion">
            <summary>
            为了判断一个对象是否已经被更新，持久化对象应当实现本接口。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.ICacheVersion.GetCacheVersion">
            <summary>
            取得实现对象的版本号。
            </summary>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.Security.PasswordStrength">
            <summary>
            密码强度评估算法:
            先根据不重复字符数、长度、字母、数字、特殊字符、字符组合评出分值，
            然后根据分值所在的区间得出密码的等级（由低到高排列）：
            非常弱、弱、一般、强、比较强、安全、非常安全。
            
            评分算法：
            不重复字符数：
                0分： 不重复字符数小于2
                5分： 不重复字符数等于2
                10分：不重复字符数大于2
            密码长度:
                5 分: 少于4个字符
                10 分: 5到7个字符
                25 分: 8个或8个以上字符
            	
            字母:
                0 分: 没有字母
                10 分: 只有小写字母或只有大写字母
                20 分: 大小写字母混合
            
            数字:
                0 分: 没有数字
                10 分: 有1到2个数字
                20 分: 3 个或3个以上数字
            	
            特殊字符:
                0 分: 没有特殊字符
                10 分: 1 个特殊字符
                20 分: 2个或2个以上特殊字符
            
            加分:
                2 分: 字母、数字组合
                3 分: 字母、数字、特殊字符组合
                5 分: 混合大小写字母、数字、特殊字符组合
            	
            评价分值区间:
            
                >= 100: VerySecure（非常安全）
                >= 90: Secure（安全）
                >= 80: VeryStrong（比较强）
                >= 65: Strong（强）
                >= 50: Average（一般）
                >= 35: Weak（弱）
                >= 0: Very Weak（非常弱）
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.EvaluatePassword(System.String)">
            <summary>
            对密码进行评分
            </summary>
            <param name="password">要评价的密码</param>
            <returns>评价结果</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.EvaluateUniqueCharCount(System.String)">
            <summary>
            检查不重复的字符个数
            </summary>
            <param name="password"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.CheckPassword(System.String)">
            <summary>
            对密码强度进行评估
            </summary>
            <param name="password">要评估的密码</param>
            <returns>返回PasswordCheckResult枚举值</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.ContainUpperCase(System.String)">
            <summary>
            判断是否包含大写字母
            </summary>
            <param name="password">要判断的密码</param>
            <returns>如果包含返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.ContainLowerCase(System.String)">
            <summary>
            判断是否包含小写字母
            </summary>
            <param name="password">要判断的密码</param>
            <returns>如果包含返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.ContainLowerOrUpper(System.String)">
            <summary>
            判断是否包含大写或小写字母
            </summary>
            <param name="password">要判断的密码</param>
            <returns>如果包含返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.ContainNumber(System.String)">
            <summary>
            判断是否包含数字
            </summary>
            <param name="password">要判断的密码</param>
            <returns>如果包含返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.PasswordStrength.ContainSpecialChar(System.String)">
            <summary>
            判断是否包含特殊字符
            </summary>
            <param name="password">要判断的密码</param>
            <returns>如果包含返回true</returns>
        </member>
        <member name="T:BitAuto.Utils.Security.PasswordCheckResult">
            <summary>
            密码强度检查结果
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.VeryWeak">
            <summary>
            非常弱
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.Weak">
            <summary>
            弱
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.Average">
            <summary>
            一般
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.Strong">
            <summary>
            强
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.VeryStrong">
            <summary>
            比较强
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.Secure">
            <summary>
            安全
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Security.PasswordCheckResult.VerySecure">
            <summary>
            非常安全
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Data.OleDbHelper">
            <summary>
            为进行 OleDbServer 数据库访问而做的封装
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.AttachParameters(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbParameter[])">
            <summary>
            此方法用力将OleDbParameter数组挂接到OleDbcommand 
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of OleDbParameters to be added to command</param>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.AssignParameterValues(System.Data.OleDb.OleDbParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of OleDbParameters
            </summary>
            <param name="commandParameters">Array of OleDbParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.PrepareCommand(System.Data.OleDb.OleDbCommand,System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The OleDbCommand to be prepared</param>
            <param name="connection">A valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns no resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns no resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQuery(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns no resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.String,System.Data.CommandType,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数的值
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数的值
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.String,System.String,System.String,System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">the stored procedure name</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbConnection,System.String,System.String,System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="spName">the stored procedure name or T-OleDb command</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数值</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnValue(System.Data.OleDb.OleDbTransaction,System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个事务 存储过程 命令，返回指定 Output 参数的值
            </summary>
            <param name="transaction">事务</param>
            <param name="spName">the stored procedure name</param>
            <param name="outParamName">返回参数的名称</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.String,System.Data.CommandType,System.String,System.String[],System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数数组
            </summary>
            <param name="connectionString">数据库链接字符串</param>
            <param name="commandType">指定如何解释命令字符串。(stored procedure, text, etc.)</param>
            <param name="commandText">要对数据源执行的 Transact-OleDb 语句或存储过程</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回参数数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.String[],System.Data.OleDb.OleDbParameter[])">
            <summary>
            执行一个 OleDb 命令，返回指定 Output 参数数组
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="commandType">the CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">the stored procedure name or T-OleDb command</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="commandParameters">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.String,System.String,System.String[],System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数数组
            </summary>
            <param name="connectionString">a valid connection string for a OleDbConnection</param>
            <param name="spName">存储过程名</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteNonQueryReturnArray(System.Data.OleDb.OleDbConnection,System.String,System.String[],System.Object[])">
            <summary>
            执行一个 存储过程 命令，返回指定 Output 参数数组
            </summary>
            <param name="connection">OleDbConnection</param>
            <param name="spName">存储过程名</param>
            <param name="outParamNameList">返回参数的名称数组</param>
            <param name="parameterValues">an array of OleDbParamters used to execute the command</param>
            <returns>返回object数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteDataset(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified 
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[],BitAuto.Utils.Data.OleDbHelper.OleDbConnectionOwnership)">
            <summary>
            Create and prepare a OleDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid OleDbConnection, on which to execute this command</param>
            <param name="transaction">A valid OleDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by OleDbHelper</param>
            <returns>OleDbDataReader containing the results of the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              OleDbDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteReader(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             OleDbDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A OleDbDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided OleDbTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.Data.CommandType,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Execute a OleDbCommand (that returns a 1x1 resultset) against the specified OleDbTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new OleDbParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelper.ExecuteScalar(System.Data.OleDb.OleDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a OleDbCommand (that returns a 1x1 resultset) against the specified
            OleDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid OleDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="T:BitAuto.Utils.Data.OleDbHelper.OleDbConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by OleDbHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Data.OleDbHelper.OleDbConnectionOwnership.Internal">
            <summary>Connection is owned and managed by OleDbHelper</summary>
        </member>
        <member name="F:BitAuto.Utils.Data.OleDbHelper.OleDbConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:BitAuto.Utils.Data.OleDbHelperParameterCache">
            <summary>
            OleDbHelperParameterCache provides functions to leverage a static cache of procedure parameters, 
            and the ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.DiscoverSpParameterSet(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of OleDbParameters for a stored procedure
            </summary>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.CloneParameters(System.Data.OleDb.OleDbParameter[])">
            <summary>
            Deep copy of cached OleDbParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.OleDb.OleDbParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <param name="commandParameters">An array of OleDbParamters to be cached</param>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="commandText">The stored procedure name or T-OleDb command</param>
            <returns>An array of OleDbParamters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a OleDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetSpParameterSet(System.Data.OleDb.OleDbConnection,System.String)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetSpParameterSet(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.OleDbHelperParameterCache.GetSpParameterSetInternal(System.Data.OleDb.OleDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of OleDbParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid OleDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of OleDbParameters</returns>
        </member>
        <member name="T:BitAuto.Utils.Config.Session.SessionConfig">
            <summary>
            Session配置类
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.Session.SessionConfig.LoadServers">
            <summary>
            做负载均衡的服务器，可以指定多个，如："tcpip=192.168.0.111:42424;tcpip=192.168.0.112:42424"
            </summary>
        </member>
        <!-- 对于成员“T:BitAuto.Utils.Caching.UrlCache.RawDataEventArgs”忽略有格式错误的 XML 注释 -->
        <member name="M:BitAuto.Utils.Caching.UrlCache.RawDataEventArgs.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="responseHtml">完整的Html文本输出类容</param>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.RawDataEventArgs.ResponseHtml">
            <summary>
            完整的Html文本输出类容
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.CustomResponseFilter">
            <summary>
            自定义过滤器
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CustomResponseFilter.#ctor(System.IO.Stream)">
            <summary>
            构造方法
            </summary>
            <param name="inputStream">被封装的输出流</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CustomResponseFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            关键的点，在HttpResponse 输入内容的时候，一定会调用此方法输入数据，所以要在此方法内截获数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper">
            <summary>
            缓存辅助类，生成缓存文件路径，根据配置判断一个Url是否需要缓存
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.ReservedParamName">
            <summary>
            用于控制aspx页面执行完成后是否生成静态文件
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.m_Request">
            <summary>
            当前请求对象
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.m_varyByParamNames">
            <summary>
            当前请求的配置的缓存参数
            </summary>
        </member>
        <member name="F:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.m_CfgOfCurrentRequest">
            <summary>
            当前请求的缓存配置
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.#ctor(System.Web.HttpRequest,BitAuto.Utils.Config.UrlCache.UrlCachePageConfig)">
            <summary>
            构造函数
            </summary>
            <param name="request">当前请求对象</param>
            <param name="cfgOfCurrentRequest">当前请求的缓存配置</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.#ctor(System.Web.HttpRequest,BitAuto.Utils.Config.UrlCache.UrlCachePageConfig,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="request">当前请求对象</param>
            <param name="cfgOfCurrentRequest">当前请求的缓存配置</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.CreateCacheFilePath">
            <summary>
            创建缓存文件的完整路径
            </summary>
            <returns>完整的缓存文件路径</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.RemoveReservedParamName(System.String[])">
            <summary>
            从页面参数列表中去掉保留的控制是否更新缓存文件的参数名
            </summary>
            <param name="queryParamNames">参数列表</param>
            <returns>返回过滤后的参数名</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.GetCacheFileLocation">
            <summary>
            取得配置的缓存文件存放目录
            </summary>
            <returns>缓存文件存放目录</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.CanBeCached">
            <summary>
            根据请求参数判断是否可以缓存
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.IsInRequestParamNames(System.String,System.String[])">
            <summary>
            判断一个请求参数是否属于一个参数名集合
            </summary>
            <param name="aRequestParamName">请求参数</param>
            <param name="requestParamNames">配置的缓存参数</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.CreateRequestParamKey(System.Web.HttpRequest,System.String[])">
            <summary>
            根据参数名创建代表这些查询字符串的Key
            </summary>
            <param name="queryParamNames">请求对象</param>
            <param name="queryParamNames">参数名</param>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.CfgOfCurrentRequest">
            <summary>
            当前请求的配置对象
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.ResponseHtml">
            <summary>
            对应当前请求的缓存文件中的内容
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.ResponseEncoding">
            <summary>
            输出编码
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.UrlCacheHelper.CacheFilePath">
            <summary>
            缓存文件的完整路径
            </summary>
        </member>
        <member name="T:BitAuto.Utils.StringHelper">
            <summary>
            字符串处理类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.GenerateRndNum(System.Int32)">
            <summary>
            生成随机的数字
            </summary>
            <param name="intLength">生成字母的个数</param>
            <returns>string</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.IsEmptyString(System.String)">
            <summary>
            验证字符串是否为空
            </summary>
            <param name="str">被判断的字符串</param>
            <returns>bool值</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.GetRealLength(System.String)">
            <summary>
            获取字符串的实际字节长度的方法
            </summary>
            <param name="source">字符串</param>
            <returns>实际长度</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.SubString(System.String,System.Int32,System.Boolean)">
            <summary>
            按字节数截取字符串的方法
            </summary>
            <param name="source">要截取的字符串</param>
            <param name="n">要截取的字节数</param>
            <param name="needEndDot">是否需要结尾的省略号</param>
            <returns>截取后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.SqlFilter(System.String)">
            <summary>
            过滤字符串中注入SQL脚本的方法
            </summary>
            <param name="source">传入的字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <!-- 对于成员“M:BitAuto.Utils.StringHelper.XSSFilter(System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:BitAuto.Utils.StringHelper.FlashFilter(System.String)">
            <summary>
            过滤字符串中注入Flash代码
            </summary>
            <param name="htmlCode">输入字符串</param>
            <returns>过滤后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.RemoveHtmlTag(System.String)">
            <summary>
            移除html标记
            </summary>
            <param name="source">移除Html标签之前的字符串</param>
            <returns>移除Html标签之后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.ReadHttp(System.String,System.String@)">
            <summary>
            读取指定URL的内容
            </summary>
            <param name="URL">指定URL</param>
            <param name="Content">该URL包含的内容</param>
            <returns>读取URL的状态</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.TrimEndZeroForPrice(System.String)">
            <summary>
            去除价格小数点后末尾“0”的方法
            </summary>
            <param name="price">去“0”之前的价格字符串</param>
            <returns>去“0”之后的价格字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.FormatDoubleToPercent(System.Double)">
            <summary>
            把浮点类型格式化为百分比字符串
            </summary>
            <param name="num">浮点类型数据</param>
            <returns>百分比字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.ComputeSimilarity(System.String,System.String)">
            <summary>
            比较两个字符串的相似性，采用编辑距离（Levenshtein Distance）算法。
            顾名思义，即：修改strA到strB需要的编辑次数。
            参见：http://www.codeproject.com/KB/recipes/Levenshtein.aspx
                        http://blog.sina.com.cn/s/blog_53e1c1230100bpe1.html
            </summary>
            <param name="strA">字符串A</param>
            <param name="strB">字符串B</param>
            <returns>返回((100 * 编辑次数) / Max(strALen, strBLen))，100代表完全相似，值越小，代表相似度越小。</returns>
        </member>
        <member name="M:BitAuto.Utils.StringHelper.ComputeEditTimes(System.String,System.String)">
            <summary>
            计算编辑次数，采用编辑距离（Levenshtein Distance）算法。
            顾名思义，即：修改strA到strB需要的编辑次数。
            参见：http://www.codeproject.com/KB/recipes/Levenshtein.aspx
                        http://blog.sina.com.cn/s/blog_53e1c1230100bpe1.html
            </summary>
            <param name="strA">字符串A</param>
            <param name="strB">字符串B</param>
            <returns>返回修改strA到strB需要的编辑次数。</returns>
        </member>
        <member name="T:BitAuto.Utils.EncodingTransfer">
            <summary>
            编码转换
            </summary>
        </member>
        <member name="M:BitAuto.Utils.EncodingTransfer.TransferEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            把字符串从一种编码转换到另一种编码
            </summary>
            <param name="fromText">需要转换的字符串</param>
            <param name="fromEncoding">原始编码</param>
            <param name="toEncoding">转换后的编码</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:BitAuto.Utils.EncodingTransfer.FromBase64String(System.String)">
            <summary>
            把以base64编码的字符串转换为byte[]数组
            </summary>
            <param name="base64String">以base64编码的字符串</param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.CacheUpdateLock">
            <summary>
            缓存更新锁
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CacheUpdateLock.Lock(System.String)">
            <summary>
            加锁
            </summary>
            <param name="key">要锁定的key</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CacheUpdateLock.Unlock(System.String)">
            <summary>
            解锁
            </summary>
            <param name="key">要解锁的key</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CacheUpdateLock.Clear">
            <summary>
            清楚所有锁
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.SingletonCache">
            <summary>
            本类通过模拟HttpRuntime，使System.Web.Caching.Cache类在非ASP.Net环境中可用。
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Caching.SingletonCache.Cache">
            <summary>
            获得System.Web.Caching.Cache类唯一实例的引用
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Security.SQLFilterModule">
            <summary>
            SQL注入攻击过滤模块
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.Init(System.Web.HttpApplication)">
            <summary>
            实现Init接口,初始化模块，并使其为处理请求做好准备。
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.Dispose">
            <summary>
            实现Dispose接口
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.SQLFilterModule_AuthorizeRequest(System.Object,System.EventArgs)">
            <summary>
            当安全模块已验证用户授权时发生.在此事件中处理SQL过滤
            </summary>
            <param name="sender">事件参数,HttpApplication</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.GetConfig(System.Web.HttpRequest)">
            <summary>
            读取配置
            </summary>
            <param name="request">http请求</param>
            <returns>返回配置信息</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.Filter(System.Web.HttpRequest,BitAuto.Utils.Config.SQLSecurity.SQLSecurityConfig)">
            <summary>
            执行过滤
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.HitUrl(System.Web.HttpRequest,System.String)">
            <summary>
            是否命中一个url规则
            </summary>
            <param name="request">request</param>
            <param name="urlRegular">规则</param>
            <returns>如果命中返回true,否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.HitIngorePost(System.String,System.String[])">
            <summary>
            检查post项是否忽略
            </summary>
            <param name="keyPost">post项</param>
            <param name="IgnorePostInputs">忽略的列表</param>
            <returns>如果忽略返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.HitKeyWords(System.Web.HttpRequest,System.String[],System.String[],System.String[],System.String@)">
            <summary>
            当前请求是否命中了SQL注入关键词.对Get,Post提交进行判断.
            </summary>
            <param name="request">当前请求</param>
            <param name="keywords">关键词列表</param>
            <param name="keychars">关键字列表</param>
            <param name="IgnorePostInputs">不检查的post项</param>
            <param name="keywordHit">命中的关键字或关键词</param>
            <returns>如果命中返回true,否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.ResolveUrl(System.String,System.String)">
            <summary>
            处理url
            </summary>
            <param name="appPath">程序路径</param>
            <param name="url">url</param>
            <returns>返回处理后的url</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.SQLFilterModule.RegexCharToNormalChar(System.String)">
            <summary>
            把正则里面的关键字转义成普通字符
            </summary>
            <param name="regexChar"></param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.PoliticsHelper">
            <summary>
            敏感词语检查类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.#cctor">
            <summary>
            静态构造方法,第一次使用该类时,读取配置文件地址.
            </summary>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.Abuse(System.String)">
            <summary>
            验证句子中是否包含过滤器中的内容
            </summary>
            <param name="sentence">需要验证的句子</param>
            <returns>True表示包含了指定的正则，句子非法；否则为False，句子合法</returns>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.Abuse(System.String,System.Boolean)">
            <summary>
            验证句子中是否包含过滤器中的内容
            </summary>
            <param name="sentence">需要验证的句子</param>      
            <param name="ignoreCase">是否忽略大小写</param>
            <returns>True表示包含了指定的正则，句子非法；否则为False，句子合法</returns>
            
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseAlert(System.String)">
            <summary>
            验证句子中是否包含了过滤器中包含的内容，如果包含，则提示后返回到输入页
            </summary>
            <param name="sentence">需要验证的句子</param>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseAlert(System.String,System.String,System.Boolean)">
            <summary>
            验证句子中是否包含了过滤器中包含的内容，如果包含，则提示指定信息后返回到输入页
            </summary>
            <param name="sentence">需要验证的句子</param>
            <param name="message">提示的信息</param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseReplace(System.String,System.String,System.Boolean)">
            <summary>
            验证句子中是否包含了过滤器中包含的内容，如果包含，则用指定的固定字符替换
            </summary>
            <param name="sentence">需要验证的句子</param>
            <param name="replacement">替换字符</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseReplaceWithColor(System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            验证句子中是否包含了过滤器中包含的内容，如果包含，则用指定的颜色标记出来
            </summary>
            <param name="sentence">需要验证的句子</param>
            <param name="color">标记的颜色</param>
            <param name="ignoreCase">是否忽略大小写</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseByPattern(System.String,System.String)">
            <summary>
            验证句子中是否包含指定正则的内容
            </summary>
            <param name="sentence">需要验证的句子</param>
            <param name="Pattern">指定的正则</param>
            <returns>True表示包含了指定的正则，否则为False</returns>
        </member>
        <member name="M:BitAuto.Utils.PoliticsHelper.AbuseAlertByPattern(System.String,System.String,System.String)">
            <summary>
            验证句子中是否包含了指定正则串的信息，如果有，则进行相应的提示并返回到输入页
            </summary>
            <param name="sentence">需要验证的句子</param>
            <param name="Pattern">验证的正则表达式</param>
            <param name="message">如果符合正则条件，返回的信息</param>
        </member>
        <member name="T:BitAuto.Utils.ConvertHelper">
            <summary>
            用于把对象型数据转成特定数据类型的方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetString(System.Object)">
            <summary>
            将对象变量转成字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>字符串变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetInteger(System.Object)">
            <summary>
            将对象变量转成32位整数型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>32位整数型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetLong(System.Object)">
            <summary>
            将对象变量转成64位整数型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>64位整数型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetDouble(System.Object)">
            <summary>
            将对象变量转成双精度浮点型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>双精度浮点型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetDecimal(System.Object)">
            <summary>
            将对象变量转成十进制数字变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>十进制数字变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetBoolean(System.Object)">
            <summary>
            将对象变量转成布尔型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>布尔型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetDateTimeString(System.Object,System.String)">
            <summary>
            将对象变量转成日期时间型字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <param name="sFormat">格式字符</param>
            <returns>时间型字符串变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetShortDateString(System.Object)">
            <summary>
            将对象变量转成日期字符串变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期字符串变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.GetDateTime(System.Object)">
            <summary>
            将对象变量转成日期型变量的方法
            </summary>
            <param name="obj">对象变量</param>
            <returns>日期型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.ConvertStringToInteger(System.String)">
            <summary>
            将字符串转成32位整数型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>32位整数型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.ConvertStringToLong(System.String)">
            <summary>
            将字符串转成64位整数型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>64位整数型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.ConvertStringToDouble(System.String)">
            <summary>
            将字符串转成双精度浮点型变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>双精度浮点型变量</returns>
        </member>
        <member name="M:BitAuto.Utils.ConvertHelper.ConvertStringToDecimal(System.String)">
            <summary>
            将字符串转成十进制数字变量的方法
            </summary>
            <param name="s">字符串</param>
            <returns>十进制数字变量</returns>
        </member>
        <member name="T:BitAuto.Utils.Data.Paging.CommonPagingMethods">
            <summary>
            分页相关的公用方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.CommonPagingMethods.ComputePageCount(System.Int64,System.Int32)">
            <summary>
                取得分页页数数
            </summary>
            <param name="dataCount">数据总记录数</param>
            <param name="PageSize">每页显示记录数</param>
            <returns>页面总数</returns>
        </member>
        <member name="T:BitAuto.Utils.Config.WebSite">
            <summary>
            单点登录站点配置处理节点
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.WebSite.Name">
            <summary>
            单点登录的网站应用，可以是一个应用附录，但url要完整
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.UserManagerConfig.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.FckEditorConfig">
            <summary>
            FckEditor配置类
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.FckEditorConfig.AbsoluteFileUrlConfig">
            <summary>
            上传文件用绝对路径的配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.FckEditorConfig.UploadConfig">
            <summary>
            上传文件的目录和文件名配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.FckEditorConfig.BaseFilePath">
            <summary>
            编辑器根目录
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.FckEditorConfig.UserFilesPath">
            <summary>
            上传文件路径根目录
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.FckEditorConfig.RecorderConfig">
            <summary>
            FckEditor 配置信息类：记录上传信息的类
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.Host">
            <summary>
            FckEditor 文件Host类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.FckEditor.Host.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="elementName"></param>       
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.Hosts">
            <summary>
            FckEditor 上传的文件用的多个随机Hosts类
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.AbsoluteFileUrlConfig">
            <summary>
            FckEditor 配置信息类：上传文件用绝对路径的信息类
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.AbsoluteFileUrlConfig.Enabled">
            <summary>
            是否用绝对路径
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.AbsoluteFileUrlConfig.DefaultHostName">
            <summary>
            默认的host
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.AbsoluteFileUrlConfig.AllowMultiHostName">
            <summary>
            绝对路径是否用多个随机host
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.AbsoluteFileUrlConfig.Hosts">
            <summary>
            多个随机的host
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.UploadConfig">
            <summary>
            FckEditor 配置信息类：上传文件的目录和文件命名配置
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.UploadConfig.AutoDirectory">
            <summary>
            使用年度、月份自动创建目录 如 2008/04/
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.UploadConfig.AutoFileName">
            <summary>
            使用时间自动文件命名，如 000103211
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.FckEditor.RecorderConfig">
            <summary>
            FckEditor 配置信息类：记录上传信息的类
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.RecorderConfig.Enabled">
            <summary>
            是否开启记录
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.FckEditor.RecorderConfig.ClassName">
            <summary>
            类名，例如 FredCK.FCKeditorV2.FileBrowser.FCKUploadRecorder,FredCK.FCKUploadRecorder
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Config.ConfigurationUtil">
            <summary>
            读取配置的工具类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Config.ConfigurationUtil.GetAppSettingValue(System.String)">
            <summary>
            取得AppSettings中配置的值，当不存在配置的值时会抛出异常
            </summary>
            <param name="configKey">配置的Key</param>
            <returns>configKey对应的配置值</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.ConfigurationUtil.GetAppSettingValue(System.String,System.Boolean)">
            <summary>
            取得AppSettings中配置的值
            </summary>
            <param name="configKey">配置的Key</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configKey对应的配置值</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.ConfigurationUtil.GetConnectionString(System.String)">
            <summary>
            取得ConnectionStrings中配置的值，当不存在配置的值时会抛出异常
            </summary>
            <param name="configName">配置的连接字符串的名字</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configName对应的配置值</returns>
        </member>
        <member name="M:BitAuto.Utils.Config.ConfigurationUtil.GetConnectionString(System.String,System.Boolean)">
            <summary>
            取得ConnectionStrings中配置的值
            </summary>
            <param name="configName">配置的连接字符串的名字</param>
            <param name="isThrowExceptionIfNotExist">当配置的值不存在时是否抛出异常</param>
            <returns>configName对应的配置值</returns>
        </member>
        <member name="T:BitAuto.Utils.EnumHelper">
            <summary>
            枚举工具类可以实现枚举值和枚举中文名称的相互转换
            </summary>
        </member>
        <member name="M:BitAuto.Utils.EnumHelper.GetEnumTextValue(System.Enum)">
            <summary>
             取得枚举值的描述，描述是由枚举值上的<c>EnumTextValueAttribute</c>指定的
            </summary>
             <param name="e">传入的枚举值</param>
             <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:BitAuto.Utils.EnumHelper.GetEnumTextValues(System.Type)">
            <summary>
             取得一个枚举类型的所有枚举值的描述，描述是由枚举值上的<c>EnumTextValueAttribute</c>指定的
            </summary>
             <param name="enumType">传入的枚举类型</param>
             <returns><see cref="T:System.Type"/> </returns>
        </member>
        <member name="M:BitAuto.Utils.EnumHelper.GetEnumValue(System.String,System.Type)">
            <summary>
             根据枚举值的<c>EnumTextValueAttribute</c>属性指定描述取得枚举值
            </summary>
             <param name="text"> <c>EnumTextValueAttribute</c>指定的描述</param>
             <param name="enumType">枚举类型</param>
             <returns><see cref="T:System.Object"/> 枚举值 </returns>
        </member>
        <member name="T:BitAuto.Utils.EnumTextValueAttribute">
            <summary>
             Attribute used to decorate enumerations with reader friendly names
            </summary>
        </member>
        <member name="M:BitAuto.Utils.EnumTextValueAttribute.#ctor(System.String)">
            <summary>
             Allows the creation of a friendly text representation of the enumeration.
            </summary>
             <param name="text">The reader friendly text to decorate the enum.</param>
        </member>
        <member name="P:BitAuto.Utils.EnumTextValueAttribute.Text">
            <summary>
             Returns the text representation of the value
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.VersionMangementUtil">
            <summary>
            持久化对象的版本管理的辅助工具类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.VersionMangementUtil.AddTimestamp(System.Byte[])">
            <summary>
            持久化对象的版本为Timestamp时，增加持久化对象的版本号。
            </summary>
            <param name="timestamp">当前的版本号</param>
            <returns>新的版本号</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.VersionMangementUtil.IsChanged(System.Byte[],System.Byte[])">
            <summary>
            判断Timestamp版本是否改变
            </summary>
            <param name="oldTimestamp">旧版本号</param>
            <param name="newTimestamp">新版本号</param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.VersionMangementUtil.ConvertTimestampToLong(System.Byte[])">
            <summary>
            把Timestamp转化为ulong
            </summary>
            <param name="timestamp">要转化的Timestamp</param>
            <returns>Timestamp的ulong值</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.VersionMangementUtil.ConvertLongToTimestamp(System.UInt64)">
            <summary>
            把ulong转化为Timestamp
            </summary>
            <param name="timestamp">要转化的ulong</param>
            <returns>Timestamp值</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.VersionMangementUtil.IsTimestampType(System.Object)">
            <summary>
            判断是否是Timestamp类型
            </summary>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.Security.DESEncryptor">
            <summary>
            新版DES加解密算法，直接调用无需创建本类的实例。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.CreateDESProvider(System.String)">
            <summary>
            获取DES加密算法的提供程序
            </summary>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>DES加密算法的提供程序</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.Encrypt(System.String)">
            <summary>
            使用默认密码加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.Encrypt(System.String,System.String)">
            <summary>
            加密字符串
            </summary>
            <param name="strText">字符串数据</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.Decrypt(System.String)">
            <summary>
            使用默认密码解密字符串
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.Decrypt(System.String,System.String)">
            <summary>
            解密字符串
            </summary>
            <param name="encryptedText">加了密的字符串</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.EncryptFile(System.String,System.String)">
            <summary>
            使用默认密码加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.EncryptFile(System.String,System.String,System.String)">
            <summary>
            DES加密文件
            </summary>
            <param name="inputFilePath">源文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="encryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.DecryptFile(System.String,System.String)">
            <summary>
            使用默认密码解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.DecryptFile(System.String,System.String,System.String)">
            <summary>
            解密文件
            </summary>
            <param name="inputFilePath">加密了的文件路径</param>
            <param name="outFilePath">输出文件路径</param>
            <param name="decryptKey">密钥，长度为8位。如果字符超长则截断，不足8位自动用字符@补充。</param>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.MD5Hash(System.String)">
            <summary>
            使用默认编码进行标准MD5加密
            </summary>
            <param name="strText">text</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="M:BitAuto.Utils.Security.DESEncryptor.MD5Hash(System.String,System.Text.Encoding)">
            <summary>
            标准MD5加密
            </summary>
            <param name="strText">text</param>
            <param name="encoding">编码方式</param>
            <returns>md5 Encrypt string</returns>
        </member>
        <member name="T:BitAuto.Utils.ImageHelper">
            <summary>
            对图片进行处理的类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.SavePicToServer(System.Web.HttpPostedFile,System.String,System.Boolean,System.String,System.String@,System.Int32,System.Int32,System.String)">
            <summary>
            保存上传图片的方法
            </summary>
            <param name="_file">图片文件</param>
            <param name="_folder">目录文件夹</param>
            <param name="_abbPic">是否生成缩略图</param>
            <param name="_picLocalPath">图片本地路径</param>
            <param name="_absPath">回传保存绝对路径</param>
            <param name="_width">允许宽度</param>
            <param name="_height">允许高度</param>
            <param name="_fileName">文件名</param>
            <returns>保存信息(0:保存失败；1：保存成功；-1：图片尺寸太大)</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.SavePicToServer(System.Web.HttpPostedFile,System.String,System.Boolean,System.String,System.String@)">
            <summary>
            保存上传图片的方法
            </summary>
            <param name="_file">图片文件</param>
            <param name="_folder">目录文件夹</param>
            <param name="_abbPic">是否生成缩略图</param>
            <param name="_picLocalPath">图片本地路径</param>
            <param name="_absPath">回传保存绝对路径</param>
            <returns>是否保存成功</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.SavePicToServer(System.Web.HttpPostedFile,System.Boolean,System.String,System.String@,System.Int32[],System.String[])">
            <summary>
            保存上传图片的方法
            </summary>
            <param name="_abbPic">是否生成缩略图</param>
            <param name="_picLocalPath">图片本地路径</param>
            <param name="_absPath">返回绝对地址</param>
            <param name="_file">上传文件控件</param>
            <param name="width">宽度</param>
            <param name="name">文件名</param>
            <returns>保存信息(0:保存失败；1：保存成功；-1：图片尺寸太大)</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.AddPicMask(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例： AddPicMask(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 10, 10, 40);
            </summary>
            <param name="srcPicFile">源文件物理路径</param>
            <param name="maskPicFile">水印图物理路径</param>
            <param name="outPicFile">输出文件物理路径</param>
            <param name="rightSpace">水印图在全图的右边距</param>
            <param name="bottomSpace">水印图在全图的下边距</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.AddPicMask(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            给图片加水印
            示例：AddPicMask(@"D:\a.jpg", @"D:\logo.jpg", @"D:\b.jpg", 3, 4, 20, 10); 
            </summary>
            <param name="srcPicFile">源文件物理路径</param>
            <param name="maskPicFile">水印图物理路径</param>
            <param name="outPicFile">输出文件物理路径</param>
            <param name="rightSpacePercent">水印图右边距占全图宽度的百分比</param>
            <param name="bottomSpacePercnet">水印图下边距占全图高度的百分比</param>
            <param name="maskWidthSizePercent">水印图宽度占全图宽度的百分比</param>
            <param name="lucencyPercent">透明度 0:全透明 100:不透明</param>
            <returns>成功返回true 否则返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetValidImageUrl(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获得有效的图片地址的方法
            </summary>
            <param name="url">数据库存储的图片地址</param>
            <param name="picServerPath">图片服务器路径</param>
            <param name="defaultUrl">默认图片路径</param>
            <param name="needRegularPic">是否需要规格图片</param>
            <returns>有效的图片地址</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetValidImageUrl(System.String,System.String,System.String,System.String)">
            <summary>
            获得有效的图片地址的方法
            </summary>
            <param name="url">数据库存储的图片地址</param>
            <param name="urlSuffix">图片路径后缀</param>
            <param name="picServerPath">图片服务器路径</param>
            <param name="defaultUrl">默认图片路径</param>
            <returns>有效的图片地址</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.CompressionImage(System.String,System.Int32)">
            <summary>
            图片压缩的方法
            </summary>
            <param name="_srcImage">原有图片路径</param>
            <param name="width">要压缩的大小</param>
            <returns>true:成功 false:失败</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.AbbreviatoryImageWidth(System.String,System.Int32,System.String)">
            <summary>
            按宽度压缩图片的方法
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <param name="_width">宽度</param>
            <param name="_fileName">文件名</param>
            <returns>压缩结果</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.AbbreviatoryImageHeight(System.String,System.Int32,System.String)">
            <summary>
            按高度压缩图片的方法
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <param name="_height">高度</param>
            <param name="_fileName">文件名</param>
            <returns>压缩结果</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.CreateAbbreviatoryImage(System.String,System.Int32)">
            <summary>
            创建缩略图的方法
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <param name="_width">压缩宽度</param>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.CreateAbbreviatoryImage(System.String,System.Int32,System.String@)">
            <summary>
            创建缩略图的方法
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <param name="_width">压缩宽度</param>
            <param name="_abbImage">压缩图片名称</param>
            <returns>压缩结果</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.RegularPicSize(System.Int32,System.Int32,System.String)">
            <summary>
            判断图片大小是否合格的方法.图片不能大于允许的宽度和高度。
            </summary>
            <param name="_width">允许宽度</param>
            <param name="_height">允许高度</param>
            <param name="_srcImage">图片完整路径</param>
            <returns>判断结果。图片大于运行的宽度或高度，返回false</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetAbbrevaiatoryImageName(System.String)">
            <summary>
            根据原始图片url获得缩略图的url
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <returns>压缩结果</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetAbbrevaiatoryImageName(System.String,System.String@)">
            <summary>
            根据原始图片url获得缩略图的url
            </summary>
            <param name="_srcImage">图片完整路径</param>
            <param name="_suffix">扩展名</param>
            <returns>压缩结果</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.CheckSize(System.String,System.Int32)">
            <summary>
            判断图片宽度必须大于指定的宽度
            </summary>
            <param name="_srcImage">图片路径</param>
            <param name="width">指定宽度</param>
            <returns>如果大于指定宽度返回true</returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.CompressImage(System.String,System.Drawing.Size,System.String)">
            <summary>
            用指定的尺寸压缩文件
            </summary>
            <param name="_srcImage"></param>
            <param name="_size"></param>
            <param name="_fileName"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetEncoderInfo(System.String)">
            <summary>
            获得包含有关内置图像编码解码器的信息的ImageCodecInfo 对象
            </summary>
            <param name="mimeType"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.GetMimeType(System.String)">
            <summary>
            获取指定的图片文件的mimetype
            </summary>
            <param name="_file"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.ImageHelper.getImageType(System.String)">
            <summary>
            获取图片类别
            </summary>
            <param name="_ContentType"></param>
            <returns></returns>
        </member>
        <member name="T:BitAuto.Utils.Config.SingleSignOnConfig">
            <summary>
            单点登录配置处理节点
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.WebSites">
            <summary>
            需要进行单点登录的站点集合
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.IsUseLoginGatewayPage">
            <summary>
            是否使用“网关页”进行单点登录处理
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.LoginGatewayPageTimeout">
            <summary>
            使用登入“网关页”时，“网关页”的超时时间(秒)
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.LogoutPageTimeout">
            <summary>
            “登出页”的超时时间(秒)
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.IsUseSsl">
            <summary>
            是否使用Https登录
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.SingleSignOnConfig.ConnStrNameWithWebsites">
            <summary>
            数据库连接字符串名称，指向配置有要进行单点登录的网站的数据库，
            如果为空字符串，则以WebSites中配置的网站为准。
            </summary>
        </member>
        <!-- 对于成员“P:BitAuto.Utils.Config.SingleSignOnConfig.CookieDomains”忽略有格式错误的 XML 注释 -->
        <member name="P:BitAuto.Utils.Config.Cdn.CdnConfig.SleepTimes">
            <summary>
            更新Url时，没更新一段时间，休息多长时间
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.CacheWrapper">
            <summary>
            本类设计了一个缓存封装器，对业务对象（持久化对象）的缓存进行封装，
            即封装了System.Web.Caching.Cache类，并提供了一些方便方法，
            使之支持持久化对象的缓存，包括：
            1、单个对象；
            2、对象数组；
            3、普通值，如count(*)返回的值；
            4、新对象缓存：并不是每新增一个对象都立即写到数据库中，
               而是批量写入数据库，减少数据库的压力，并减少写入操作的等待时间；
            5、更新缓存：并不是每次更新都立即写到数据库中，
               而是批量写入数据库，减少数据库的压力，并减少写入操作的等待时间。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.#ctor(System.Type,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="persistedObjectType">持久化对象的类型</param>
            <param name="idPropertyName">持久化对象的主键名</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.#ctor(System.Type,System.String,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="persistedObjectType">持久化对象的类型</param>
            <param name="idPropertyName">持久化对象的主键属性名</param>
            <param name="versionPropertyName">持久化对象的版本号属性名</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.#ctor(System.Type,System.String,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            构造方法
            </summary>
            <param name="persistedObjectType">持久化对象的类型</param>
            <param name="idPropertyName">持久化对象的主键属性名</param>
            <param name="insertingObjectsOnRemove">指定当新增对象被清除出缓存时的回调操作，
            此操作把这些新增的对象写入数据库</param>
            <param name="updatingObjectsOnRemove">指定当更新对象被清除出缓存时的回调操作，
            此操作把这些更新的对象写入数据库</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.#ctor(System.Type,System.String,System.String,System.Web.Caching.CacheItemRemovedCallback,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            构造方法
            </summary>
            <param name="persistedObjectType">持久化对象的类型</param>
            <param name="idPropertyName">持久化对象的主键属性名</param>
            <param name="versionPropertyName">持久化对象的版本号属性名</param>
            <param name="insertingObjectsOnRemove">指定当新增对象被清除出缓存时的回调操作，
            此操作把这些新增的对象写入数据库</param>
            <param name="updatingObjectsOnRemove">指定当更新对象被清除出缓存时的回调操作，
            此操作把这些更新的对象写入数据库</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObject(System.Object)">
            <summary>
            向缓存中增加一持久化对象
            </summary>
            <param name="persistedObject">持久化对象</param>
            <returns>
            	返回被加入的持久化对像，如果缓存中存在比该对象更新的版本，
            	则返回新版本的对象。
            </returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObject(System.Object,System.Web.Caching.CacheItemPriority)">
            <summary>
            向缓存中增加一持久化对象
            </summary>
            <param name="persistedObject">持久化对象</param>
            <param name="cacheItemPriority">缓存优先级
            	<see cref="T:System.Web.Caching.CacheItemPriority"/>
            </param>
            <returns>
            	返回被加入的持久化对像，如果缓存中存在比该对象更新的版本，
            	则返回新版本的对象。
            </returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObject(System.Object,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            向缓存中增加一持久化对象
            </summary>
            <param name="persistedObject">持久化对象</param>
            <param name="onRemove">当对象被移出缓存时的回调方法</param>
            <returns>
            	返回被加入的持久化对像，如果缓存中存在比该对象更新的版本，
            	则返回新版本的对象。
            </returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObject(System.Object,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            向缓存中增加一持久化对象
            </summary>
            <param name="persistedObject">持久化对象</param>
            <param name="cacheItemPriority">缓存优先级
            	<see cref="T:System.Web.Caching.CacheItemPriority"/>
            </param>
            <param name="onRemove">当对象被移出缓存时的回调方法</param>
            <returns>
            	返回被加入的持久化对像，如果缓存中存在比该对象更新的版本，
            	则返回新版本的对象。
            </returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObjects(System.Collections.IList,System.Reflection.MethodBase,System.Object[])">
            <summary>
            向缓存中增加一持久化对象数组，后两个参数用于生成不重复的Cache Key
            </summary>
            <param name="persistedObjects">持久化对象数组</param>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>
            	返回被加入的持久化对像的IList，如果缓存中存在比该IList中元素更新的版本，
            	则返回新版本的对象。
            </returns>		
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddPersistedObjects(System.Collections.IList,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Reflection.MethodBase,System.Object[])">
            <summary>
            向缓存中增加一持久化对象数组，后两个参数用于生成不重复的Cache Key
            </summary>
            <param name="persistedObjects">持久化对象数组</param>
            <param name="cacheItemPriority">缓存优先级
            	<see cref="T:System.Web.Caching.CacheItemPriority"/>
            </param>
            <param name="onRemove">当对象被移出缓存时的回调方法</param>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>
            	返回被加入的持久化对像的IList，如果缓存中存在比该IList中元素更新的版本，
            	则返回新版本的对象。
            </returns>		
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddNormalValue(System.Object,System.Reflection.MethodBase,System.Object[])">
            <summary>
            	向缓存中增加普通的值，用于缓存可能需要查询数据库、耗费很多资源才能计算出来的值
            	如count(*)、sum(字段名) 等。
            </summary>
            <param name="normalValue">缓存的值</param>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>
            	返回被加入的普通值的Cache Key
            </returns>		
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddNormalValue(System.Object,System.Web.Caching.CacheDependency,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback,System.Reflection.MethodBase,System.Object[])">
            <summary>
            	向缓存中增加普通的值，用于缓存可能需要查询数据库、耗费很多资源才能计算出来的值
            	如count(*)、sum(字段名) 等。
            </summary>
            <param name="normalValue">缓存的值</param>
            <param name="dependency">
            	缓存值的依赖，当依赖变化时，
            	缓存值将从缓存中清除
            </param>
            <param name="cacheSlidingExpiration">缓存值的过期时间跨度</param>
            <param name="cacheItemPriority">缓存优先级
            	<see cref="T:System.Web.Caching.CacheItemPriority"/>
            </param>
            <param name="onRemove">当对象被移出缓存时的回调方法</param>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>
            	返回被加入的普通值的Cache Key
            </returns>		
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddInsertingObject(System.Object)">
            <summary>
            增加一个新持久对象到缓存，此时并不更新到数据库，
            当缓存中该对象被移出时调用构造方法中指定的
            insertingObjectsOnRemove回调方法写入数据库
            或调用方显示写入数据库
            </summary>
            <param name="insertingObject">新持久对象</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.AddUpdatingObject(System.Object)">
            <summary>
            增加一个修改过的持久对象到缓存，此时并不更新到数据库，
            当缓存中该对象被移出时调用构造方法中指定的
            updatingObjectsOnRemove回调方法写入数据库
            或调用方显示写入数据库
            </summary>
            <param name="updatingObject">修改过的持久对象</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetPersistedObject(System.Object)">
            <summary>
            根据对象id取得持久对象
            </summary>
            <param name="objectId">对象id</param>
            <returns>持久对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetPersistedObjectByPersistedObject(System.Object)">
            <summary>
            根据持久对象的缓存版，内部调用
            </summary>
            <param name="persistedObject">持久对象引用</param>
            <returns>缓存中持久对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetPersistedObjects(System.Reflection.MethodBase,System.Object[])">
            <summary>
            	取得缓存中的持久对象数数组
            </summary>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>持久化对象数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetNormalValue(System.Reflection.MethodBase,System.Object[])">
            <summary>
            	取得缓存的普通值，该值可能需要查询数据库、耗费很多资源才能计算出来
            	如count(*)、sum(字段名) 等。
            </summary>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
            <returns>
            	返回缓存中的普通值
            </returns>		
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetInsertingObjects">
            <summary>
            	取得缓存中新持久化对象数组
            </summary>
            <returns>新持久化对象数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.GetUpdatingObject">
            <summary>
            	取得缓存中修改过的持久化对象数组
            </summary>
            <returns>修改过的持久化对象数组</returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemoveByObject(System.Object)">
            <summary>
            根据对象引用从缓存中移除某个持久化对像
            </summary>
            <param name="persistedObject"></param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemoveByObjectId(System.Object)">
            <summary>
            根据对象id移除持久化对象
            </summary>
            <param name="objectId"></param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemovePersistedObjects(System.Reflection.MethodBase,System.Object[])">
            <summary>
            	移除缓存中的持久化对象数组
            </summary>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemoveNormalValue(System.Reflection.MethodBase,System.Object[])">
            <summary>
            	移除缓存的普通值，该值可能需要查询数据库、耗费很多资源才能计算出来
            	如count(*)、sum(字段名) 等。
            </summary>
            <param name="persistedMethod">
            	调用本操作的方法，可以通过MethodBase.GetCurrentMethod()
            	获得本参数的值。
            </param>
            <param name="methodParams">调用本操作的方法的参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemoveInsertingObjects">
            <summary>
            移除缓存中所有的新持久化对象，本方法会触发insertingObjectsOnRemove回调方法的执行
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.CacheWrapper.RemoveUpdatingObjects">
            <summary>
            移除缓存中所有修改过的持久化对象，本方法会触发updatingObjectsOnRemove回调方法的执行
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule">
            <summary>
            缓存HttpModule
            根据配置拦截输出流，把类容写到文件系统，下次访问时从文件系统中读取
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.Dispose">
            <summary>
            对象销毁事件处理方法
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.Init(System.Web.HttpApplication)">
            <summary>
            HttpModule初始化方法
            </summary>
            <param name="context">应用上下文（场景）</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.context_PostResolveRequestCache(System.Object,System.EventArgs)">
            <summary>
            http开始请求处理
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.WriteFromCache(BitAuto.Utils.Caching.UrlCache.UrlCacheHelper)">
            <summary>
            如果缓存文件存在则输出之
            </summary>
            <param name="urlCacheHelper">类型为AspnetIndependent的参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.SetResponseCacheHeaders(System.DateTime,System.Int32,BitAuto.Utils.Caching.UrlCache.UrlCacheHelper)">
            <summary>
            设置缓存头
            </summary>
            <param name="lastModifiedTime">最后修改时间</param>
            <param name="duration">缓存跨度，分钟</param>
            <param name="urlCacheHelper">类型为AspnetIndependent的参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.AttachCustomResponseFilter">
            <summary>
            定制输出流
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.filter_OnRawDataRecordedEvent(System.Object,BitAuto.Utils.Caching.UrlCache.RawDataEventArgs)">
            <summary>
            缓存不命中时输出完成后的处理事件
            </summary>
            <param name="sender">事件产生者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.CreateOrUpdateCachedFile(System.Object)">
            <summary>
            创建缓存文件
            </summary>
            <param name="objParam">类型为AspnetIndependent的参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.SendUpdateRequest(System.String)">
            <summary>
            发送更新缓存文件的请求
            </summary>
            <param name="cacheFilePath">缓存Key</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.webclient_DownloadDataCompleted(System.Object,System.Net.DownloadDataCompletedEventArgs)">
            <summary>
            异步更新完缓存文件后的事件处理方法
            </summary>
            <param name="sender">事件产生者</param>
            <param name="e">事件参数</param>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.GetHtmlFromFileSystem(BitAuto.Utils.Caching.UrlCache.UrlCacheHelper)">
            <summary>
            从文件系统取得缓存对象
            </summary>
            <param name="urlCacheHelper"></param>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.GetCfgOfCurrentRequest">
            <summary>
            查找和当前请求匹配的缓存配置
            </summary>
            <returns></returns>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.UrlCacheHttpModule.ReservedParamName">
            <summary>
            本静态属性供外部程序用于拼接更新缓存文件的请求。
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Caching.UrlCache.CachedValue">
            <summary>
            缓存对象类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Caching.UrlCache.CachedValue.#ctor(System.String,System.DateTime)">
            <summary>
            构造方法
            </summary>
            <param name="responseHtml">对应缓存文件中包含的内容</param>
            <param name="createdTime">缓存文件的最后修改时间</param>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.CachedValue.ResponseHtml">
            <summary>
            对应缓存文件中包含的内容
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Caching.UrlCache.CachedValue.LastModifiedTime">
            <summary>
            缓存文件的最后修改时间
            </summary>
        </member>
        <member name="T:BitAuto.Utils.User.AuthenProcessor">
            <summary>
            本类是单点登录处理工具类，全部为静态方法
            </summary>
        </member>
        <member name="F:BitAuto.Utils.User.AuthenProcessor.RequestKey_UserNameToAuthenService">
            <summary>
            
            </summary>
        </member>
        <member name="F:BitAuto.Utils.User.AuthenProcessor.RequestKey_PasswordToAuthenService">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteLoginProcess">
            <summary>
            检测用户是否已经在认证服务上登录过了.
            本方法用于应用Login.aspx的Page_Load方法中,
            如果已经登录过，则建立认证Session，并把请求
            重定向回原始访问页面或应用的缺省页面
            如果没有登录过，则什么都不做。
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteLoginProcess(System.String)">
            <summary>
            检测用户是否已经在认证服务上登录过了.
            本方法用于应用Login.aspx的Page_Load方法中,
            如果已经登录过，则建立认证Session，并把请求
            重定向回原始访问页面或应用的缺省页面
            如果没有登录过，则什么都不做。
            </summary>
            <param name="returnUrl">当登录成功后，浏览器转向的页面</param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteLoginProcess(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="username"></param>
            <param name="password"></param>
            <param name="returnUrl"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteLoginPreprocess(System.String,System.String)">
            <summary>
            Web应用向认证服务发起登录请求前的处理
            </summary>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteAfterAuthenServiceProcessed(System.String)">
            <summary>
            Web应用在认证服务处理完登录请求后的后续处理
            </summary>
            <param name="returnUrl"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceOnUserLoggedIn(System.String)">
            <summary>
            标记当前会话已认证并记录用户名
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceLogin_PreRenderCompleteHandler(System.Object,System.EventArgs)">
            <summary>
            认证服务中Login.aspx的PreRenderCompleteHandler时间处理方法
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceLoginedProcess">
            <summary>
            生成认证会话及Cookie
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceLogoutProcess">
            <summary>
            认证服务自身的登出处理
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClientWebsiteLogoutProcess">
            <summary>
            Web应用的登出处理
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceRecordLoginedServer(System.String)">
            <summary>
            记录已经登录了的应用的Url，登出时利用该Url登出应用
            </summary>
            <param name="sourceLoginPage"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.GetLoginedServers">
            <summary>
            注意防止并发的做法
            </summary>
            <returns>ArrayList</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.AuthenServiceCreateLogoutIFrames">
            <summary>
            生成登出IFrames
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.IsAuthenticated">
            <summary>
            取得当前会话是否已经认证
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.GetAuthenticatedUserName">
            <summary>
            取得当前登录的用户名
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.GetAuthenServiceLoginUrl">
            <summary>
            取得认证服务上登录服务的Url地址
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.GetAuthenServiceLogoutUrl">
            <summary>
            取得认证服务上登出服务的Url地址
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.SetIsShowLoginError">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.SetIsShowLoginError(System.Boolean)">
            <summary>
            
            </summary>
            <param name="isShowLoginError"></param>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.ClearIsShowLoginError">
            <summary>
            
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.IsShowLoginError">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.CheckLoginStatus">
            <summary>
            检查登录状态，即尝试不输入密码进行登录，
            无论登录成功与否都立即返回当前页面
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.IsNeedCheckLoginStatus">
            <summary>
            判断是否需要检查用户是否在已在认证服务器上登录过
            </summary>
            <returns></returns>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.RefreshCheckLoginStatusTime">
            <summary>
            更新登录状态检查的时间
            </summary>
        </member>
        <member name="M:BitAuto.Utils.User.AuthenProcessor.HoldAuthenticatedSession">
            <summary>
            保持与认证服务的Session连接，调用本方法防止认证服务的Session过期，
            一般是在业务应用的Page基类中的Page_Load方法中调用本方法
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper">
            <summary>
            封装了SqlDataAdapter中的Fill分页算法，对于小数据量的分页比较方便。
            但是大数据量的分页不推荐使用这个类。
            </summary>    
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataSetByPage(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            获取分页数据
            </summary>
            <param name="sql">取数sql语句</param>
            <param name="pageIndex">起始的页面编号</param>
            <param name="pageSize">页面的记录数</param>
            <param name="connectionString">
            数据库连接对象，如果连接对象未打开，本方法将会打开，
            无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>指定条件的分页数据</returns> 
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataSetByPage(System.String,System.Int32,System.Int32,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取分页数据
            </summary>
            <param name="sql">取数sql语句</param>
            <param name="pageIndex">0 起始的页面编号</param>
            <param name="pageSize">页面的记录数</param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>指定条件的分页数据</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String,System.String,System.String)">
            <summary>
                获取分页数据的记录总数
            </summary>
            <param name="tableName">表名，可以是子查询</param>
            <param name="whereCondition">
                查询条件，可以是子查询，可以不带"where"前缀关键字。
            </param>
            <param name="groupBy">分组条件，可以不带"group by"关键字</param>
            <param name="connectionString">
                数据库连接字符串
            </param>
            <returns>分页数据的记录总数</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取分页数据的记录总数
            </summary>
            <param name="tableName">表名，可以是子查询</param>
            <param name="whereCondition">
                查询条件，可以是子查询，不带"where"前缀关键字也可以。
            </param>
            <param name="groupBy">分组条件，可以不带"group by"关键字</param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>分页数据的记录总数</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.String)">
            <summary>
                获取记录总数
            </summary>
            <param name="sql">
                形如"select count(*) from tablename" 的Sql语句
            </param>
            <param name="connectionString">
                数据库连接字符串
            </param>
            <returns>记录总数</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.Paging.SqlDataAdapterPagingWrapper.GetDataCount(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
                获取记录总数
            </summary>
            <param name="sql">
                形如"select count(*) from tablename" 的Sql语句
            </param>
            <param name="conn">
                数据库连接对象，如果连接对象未打开，本方法将会打开，
                无论如何，本方法不会关闭连接，所以调用方应该显示关闭连接。
            </param>
            <returns>记录总数</returns>
        </member>
        <member name="T:BitAuto.Utils.Config.UrlCache.UrlCacheConfig">
            <summary>
            UrlCacheConfig配置类
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCacheConfig.Enabled">
            <summary>
            是否启用，可以不配置，缺省为true。
            当为false时UrlCache中所有功能均禁止
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCacheConfig.HtmlStoragePath">
            <summary>
            生成的Html静态内容的存放路径
            </summary>
        </member>
        <member name="P:BitAuto.Utils.Config.UrlCache.UrlCacheConfig.UrlCachePages">
            <summary>
            跳转地址配置集合
            </summary>
        </member>
        <member name="T:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager">
            <summary>
            调用Windows底层函数建立或删除共享Session
            本类的功能类似命令：Net Use的功能
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.RESOURCETYPE_ANY">
            <summary>
            表示资源类型的常量
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.CONNECT_INTERACTIVE">
            <summary>
            交互式链接
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.CONNECT_PROMPT">
            <summary>
            链接提示
            </summary>
        </member>
        <member name="M:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.AddUse(System.String,System.String,System.String)">
            <summary>
            用指定的帐户登录局域网内计算机，建立文件共享Session
            </summary>
            <param name="resource">局域网内计算上的共享资源，如："\\192.168.0.111\ymd", 注意后面不要跟"\"符号，否则会报“找不到网络路径”错误</param>
            <param name="userName">能访问上述资源的用户名</param>
            <param name="password">密码</param>
            <remarks> 如果是在服务中调用本方法，服务的登录标识不能是系统内置的Local System或Network Service账户，
            而必须指定为能够登录服务所在计算机的Windows帐户
            </remarks>
        </member>
        <member name="M:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.DeleteUse(System.String,System.Boolean)">
            <summary>
            删除已经存在的访问共享文件的Session
            </summary>
            <param name="resource">局域网内计算上的共享资源，如："\\192.168.0.111\ymd",注意后面不要跟"\"符号，否则会报“找不到网络路径”错误</param>
            <param name="isForce">是否强制删除还处于活动状态的共享Session</param>
        </member>
        <member name="M:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.WNetAddConnection2(BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE@,System.String,System.String,System.Int32)">
            <summary>
            帐户登录局域网内计算机，建立文件共享Session
            </summary>
            <param name="lpNetResource">资源位置</param>
            <param name="lpPassword">密码</param>
            <param name="lpUsername">用户名</param>
            <param name="dwFlags">标志</param>
            <returns>0——代表成功</returns>
        </member>
        <member name="M:BitAuto.Utils.WindowsFuncWrapper.ShareSessionManager.WNetCancelConnection2(System.String,System.Int32,System.Boolean)">
            <summary>
            删除已经存在的访问共享文件的Session
            </summary>
            <param name="lpName">资源位置</param>
            <param name="dwFlags">标志</param>
            <param name="fForce">当资源正被使用时是否强制删除</param>
            <returns>0——代表成功</returns>
        </member>
        <member name="T:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE">
            <summary>
            Win32 API要求的参数的结构类型
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.dwScope">
            <summary>
            范围
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.dwType">
            <summary>
            类型
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.dwDisplayType">
            <summary>
            显示类型
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.dwUsage">
            <summary>
            用法
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.lpLocalName">
            <summary>
            本机的映射名
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.lpRemoteName">
            <summary>
            远程资源名
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.lpComment">
            <summary>
            注释
            </summary>
        </member>
        <member name="F:BitAuto.Utils.WindowsFuncWrapper.NETRESOURCE.lpProvider">
            <summary>
            提供者
            </summary>
        </member>
        <member name="T:BitAuto.Utils.Data.DataObjectConverter">
            <summary>
            本类提供DataRow对象和普通对象之间的相互转换功能，
            </summary>
        </member>
        <member name="M:BitAuto.Utils.Data.DataObjectConverter.FillDataRowToObject(System.Data.DataRow,System.Type)">
            <summary>
            把DataRow对象转换为普通持久化（业务）对象
            </summary>
            <param name="dataRow">DataRow对象</param>
            <param name="typeOfObject">目标持久化对象的类型</param>
            <returns>普通持久化（业务）对象</returns>
        </member>
        <member name="M:BitAuto.Utils.Data.DataObjectConverter.FillObjectToDataRow(System.Object,System.Data.DataRow)">
            <summary>
            把普通持久化（业务）对象转换为DataRow对象
            </summary>
            <param name="srcObject">普通持久化（业务）对象</param>
            <param name="dataRow">DataRow对象</param>
        </member>
        <member name="T:BitAuto.Utils.ScriptHelper">
            <summary>
            用于在页面中输出脚本的类
            </summary>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertScript(System.Web.UI.Page,System.String)">
            <summary>
            弹出消息提示对话框
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertScript(System.String)">
            <summary>
            弹出消息提示对话框，并跳转回上一页面，无须指定Page对象
            </summary>
            <param name="msg">显示的消息</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertScriptAndContinue(System.String)">
            <summary>
            弹出消息提示对话框，无须指定Page对象
            </summary>
            <param name="msg">显示的消息</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertAndRedirectScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            弹出消息提示对话框，并进行页面跳转。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertAndRedirectScript(System.String,System.String)">
            <summary>
            弹出消息提示对话框，并进行页面跳转。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。
            </summary>
            <param name="msg">提示信息</param>
            <param name="url">提示信息后要跳转的页面.，当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowConfirmAndRedirectScript(System.Web.UI.Page,System.String,System.String)">
            <summary>
            弹出确认消息提示对话框，点击确认后页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url">跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowConfirmAndRedirectScript(System.Web.UI.Page,System.String,System.String,System.String)">
            <summary>
            弹出确认消息提示对话框，点击确认或取消后页面跳转
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="msg">提示信息</param>
            <param name="url1">点击确定时，跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
            <param name="url2">点击取消时，跳转的目标URL。当URL为BACK时，页面将退到上一页，当URL为CLOSE时，则关闭窗口。</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowConfirmScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowOpenScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击打开窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowOpenScript(System.Web.UI.WebControls.WebControl,System.String,System.Int32,System.Int32)">
            <summary>
            控件点击打开窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
            <param name="width">打开页面的宽度</param>
            <param name="height">打开页面的高度</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowOpenMaxScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击打开最大化窗体
            </summary>
            <param name="Control">目标控件</param>
            <param name="url">打开页面的地址</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowCloseScript(System.Web.UI.WebControls.WebControl)">
            <summary>
            控件点击关闭窗体
            </summary>
            <param name="Control">目标控件</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertAndCloseScript(System.Web.UI.WebControls.WebControl,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowAlertAndCloseScript(System.Web.UI.WebControls.WebControl,System.String,System.String)">
            <summary>
            控件点击消息确认提示框
            </summary>
            <param name="Control">目标控件</param>
            <param name="msg">提示信息</param>
            <param name="url">父窗体地址</param>
        </member>
        <member name="M:BitAuto.Utils.ScriptHelper.ShowCustomScript(System.Web.UI.Page,System.String)">
            <summary>
            输出自定义脚本信息
            </summary>
            <param name="page">当前页面指针，一般为this</param>
            <param name="script">输出脚本</param>
        </member>
    </members>
</doc>
