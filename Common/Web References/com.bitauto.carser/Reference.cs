//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18052 版自动生成。
// 
#pragma warning disable 1591

namespace BitAuto.CarChannel.Common.com.bitauto.carser {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="WebServiceForPicMasterToSerial")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback DescriptionThisWebServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSpellForMasterToCarOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterToBrandToSerialUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarParameterConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarParameterConfigurationXMLContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllSerialYesterdayAndLastWeekSortOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastUpdateTimeForCarListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCarBySerialXMLContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXMLContentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrandToSerialForForeignOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLastUpdateTimeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::BitAuto.CarChannel.Common.Properties.Settings.Default.Common_com_bitauto_carser_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event DescriptionThisWebServiceCompletedEventHandler DescriptionThisWebServiceCompleted;
        
        /// <remarks/>
        public event GetAllSpellForMasterToCarCompletedEventHandler GetAllSpellForMasterToCarCompleted;
        
        /// <remarks/>
        public event GetMasterToBrandToSerialUpdateTimeCompletedEventHandler GetMasterToBrandToSerialUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventHandler GetMasterToBrandToSerialAllSaleUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventHandler GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventHandler GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompleted;
        
        /// <remarks/>
        public event GetCarParameterConfigurationCompletedEventHandler GetCarParameterConfigurationCompleted;
        
        /// <remarks/>
        public event GetCarParameterConfigurationXMLContentCompletedEventHandler GetCarParameterConfigurationXMLContentCompleted;
        
        /// <remarks/>
        public event GetAllSerialYesterdayAndLastWeekSortCompletedEventHandler GetAllSerialYesterdayAndLastWeekSortCompleted;
        
        /// <remarks/>
        public event GetLastUpdateTimeForCarListCompletedEventHandler GetLastUpdateTimeForCarListCompleted;
        
        /// <remarks/>
        public event GetCarBySerialXMLContentCompletedEventHandler GetCarBySerialXMLContentCompleted;
        
        /// <remarks/>
        public event GetXMLContentCompletedEventHandler GetXMLContentCompleted;
        
        /// <remarks/>
        public event GetBrandToSerialForForeignCompletedEventHandler GetBrandToSerialForForeignCompleted;
        
        /// <remarks/>
        public event GetLastUpdateTimeCompletedEventHandler GetLastUpdateTimeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/DescriptionThisWebService", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DescriptionThisWebService() {
            object[] results = this.Invoke("DescriptionThisWebService", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DescriptionThisWebServiceAsync() {
            this.DescriptionThisWebServiceAsync(null);
        }
        
        /// <remarks/>
        public void DescriptionThisWebServiceAsync(object userState) {
            if ((this.DescriptionThisWebServiceOperationCompleted == null)) {
                this.DescriptionThisWebServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDescriptionThisWebServiceOperationCompleted);
            }
            this.InvokeAsync("DescriptionThisWebService", new object[0], this.DescriptionThisWebServiceOperationCompleted, userState);
        }
        
        private void OnDescriptionThisWebServiceOperationCompleted(object arg) {
            if ((this.DescriptionThisWebServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DescriptionThisWebServiceCompleted(this, new DescriptionThisWebServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetAllSpellForMasterToCar", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllSpellForMasterToCar(out string xmlURL) {
            object[] results = this.Invoke("GetAllSpellForMasterToCar", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSpellForMasterToCarAsync() {
            this.GetAllSpellForMasterToCarAsync(null);
        }
        
        /// <remarks/>
        public void GetAllSpellForMasterToCarAsync(object userState) {
            if ((this.GetAllSpellForMasterToCarOperationCompleted == null)) {
                this.GetAllSpellForMasterToCarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSpellForMasterToCarOperationCompleted);
            }
            this.InvokeAsync("GetAllSpellForMasterToCar", new object[0], this.GetAllSpellForMasterToCarOperationCompleted, userState);
        }
        
        private void OnGetAllSpellForMasterToCarOperationCompleted(object arg) {
            if ((this.GetAllSpellForMasterToCarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSpellForMasterToCarCompleted(this, new GetAllSpellForMasterToCarCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetMasterToBrandToSerialUpdateTime", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterToBrandToSerialUpdateTime(out string xmlURL) {
            object[] results = this.Invoke("GetMasterToBrandToSerialUpdateTime", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialUpdateTimeAsync() {
            this.GetMasterToBrandToSerialUpdateTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialUpdateTimeAsync(object userState) {
            if ((this.GetMasterToBrandToSerialUpdateTimeOperationCompleted == null)) {
                this.GetMasterToBrandToSerialUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterToBrandToSerialUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetMasterToBrandToSerialUpdateTime", new object[0], this.GetMasterToBrandToSerialUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetMasterToBrandToSerialUpdateTimeOperationCompleted(object arg) {
            if ((this.GetMasterToBrandToSerialUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterToBrandToSerialUpdateTimeCompleted(this, new GetMasterToBrandToSerialUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetMasterToBrandToSerialAllSaleUpdateTime", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterToBrandToSerialAllSaleUpdateTime(out string xmlURL) {
            object[] results = this.Invoke("GetMasterToBrandToSerialAllSaleUpdateTime", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialAllSaleUpdateTimeAsync() {
            this.GetMasterToBrandToSerialAllSaleUpdateTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialAllSaleUpdateTimeAsync(object userState) {
            if ((this.GetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted == null)) {
                this.GetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetMasterToBrandToSerialAllSaleUpdateTime", new object[0], this.GetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetMasterToBrandToSerialAllSaleUpdateTimeOperationCompleted(object arg) {
            if ((this.GetMasterToBrandToSerialAllSaleUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterToBrandToSerialAllSaleUpdateTimeCompleted(this, new GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetMasterToBrandToSerialAllSaleAndLevelUpdateTime", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterToBrandToSerialAllSaleAndLevelUpdateTime(out string xmlURL) {
            object[] results = this.Invoke("GetMasterToBrandToSerialAllSaleAndLevelUpdateTime", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeAsync() {
            this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeAsync(object userState) {
            if ((this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted == null)) {
                this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetMasterToBrandToSerialAllSaleAndLevelUpdateTime", new object[0], this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetMasterToBrandToSerialAllSaleAndLevelUpdateTimeOperationCompleted(object arg) {
            if ((this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompleted(this, new GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetMasterToBrandToSerialHasBlankBrandUpdateTime", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMasterToBrandToSerialHasBlankBrandUpdateTime(out string xmlURL) {
            object[] results = this.Invoke("GetMasterToBrandToSerialHasBlankBrandUpdateTime", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialHasBlankBrandUpdateTimeAsync() {
            this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetMasterToBrandToSerialHasBlankBrandUpdateTimeAsync(object userState) {
            if ((this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted == null)) {
                this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetMasterToBrandToSerialHasBlankBrandUpdateTime", new object[0], this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetMasterToBrandToSerialHasBlankBrandUpdateTimeOperationCompleted(object arg) {
            if ((this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompleted(this, new GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetCarParameterConfiguration", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarParameterConfiguration(int carID, out string xmlURL) {
            object[] results = this.Invoke("GetCarParameterConfiguration", new object[] {
                        carID});
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarParameterConfigurationAsync(int carID) {
            this.GetCarParameterConfigurationAsync(carID, null);
        }
        
        /// <remarks/>
        public void GetCarParameterConfigurationAsync(int carID, object userState) {
            if ((this.GetCarParameterConfigurationOperationCompleted == null)) {
                this.GetCarParameterConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarParameterConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetCarParameterConfiguration", new object[] {
                        carID}, this.GetCarParameterConfigurationOperationCompleted, userState);
        }
        
        private void OnGetCarParameterConfigurationOperationCompleted(object arg) {
            if ((this.GetCarParameterConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarParameterConfigurationCompleted(this, new GetCarParameterConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetCarParameterConfigurationXMLContent", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarParameterConfigurationXMLContent(int carID) {
            object[] results = this.Invoke("GetCarParameterConfigurationXMLContent", new object[] {
                        carID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarParameterConfigurationXMLContentAsync(int carID) {
            this.GetCarParameterConfigurationXMLContentAsync(carID, null);
        }
        
        /// <remarks/>
        public void GetCarParameterConfigurationXMLContentAsync(int carID, object userState) {
            if ((this.GetCarParameterConfigurationXMLContentOperationCompleted == null)) {
                this.GetCarParameterConfigurationXMLContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarParameterConfigurationXMLContentOperationCompleted);
            }
            this.InvokeAsync("GetCarParameterConfigurationXMLContent", new object[] {
                        carID}, this.GetCarParameterConfigurationXMLContentOperationCompleted, userState);
        }
        
        private void OnGetCarParameterConfigurationXMLContentOperationCompleted(object arg) {
            if ((this.GetCarParameterConfigurationXMLContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarParameterConfigurationXMLContentCompleted(this, new GetCarParameterConfigurationXMLContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetAllSerialYesterdayAndLastWeekSort", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllSerialYesterdayAndLastWeekSort(out string xmlURL) {
            object[] results = this.Invoke("GetAllSerialYesterdayAndLastWeekSort", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllSerialYesterdayAndLastWeekSortAsync() {
            this.GetAllSerialYesterdayAndLastWeekSortAsync(null);
        }
        
        /// <remarks/>
        public void GetAllSerialYesterdayAndLastWeekSortAsync(object userState) {
            if ((this.GetAllSerialYesterdayAndLastWeekSortOperationCompleted == null)) {
                this.GetAllSerialYesterdayAndLastWeekSortOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllSerialYesterdayAndLastWeekSortOperationCompleted);
            }
            this.InvokeAsync("GetAllSerialYesterdayAndLastWeekSort", new object[0], this.GetAllSerialYesterdayAndLastWeekSortOperationCompleted, userState);
        }
        
        private void OnGetAllSerialYesterdayAndLastWeekSortOperationCompleted(object arg) {
            if ((this.GetAllSerialYesterdayAndLastWeekSortCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllSerialYesterdayAndLastWeekSortCompleted(this, new GetAllSerialYesterdayAndLastWeekSortCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetLastUpdateTimeForCarList", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastUpdateTimeForCarList(out string xmlURL) {
            object[] results = this.Invoke("GetLastUpdateTimeForCarList", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeForCarListAsync() {
            this.GetLastUpdateTimeForCarListAsync(null);
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeForCarListAsync(object userState) {
            if ((this.GetLastUpdateTimeForCarListOperationCompleted == null)) {
                this.GetLastUpdateTimeForCarListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdateTimeForCarListOperationCompleted);
            }
            this.InvokeAsync("GetLastUpdateTimeForCarList", new object[0], this.GetLastUpdateTimeForCarListOperationCompleted, userState);
        }
        
        private void OnGetLastUpdateTimeForCarListOperationCompleted(object arg) {
            if ((this.GetLastUpdateTimeForCarListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastUpdateTimeForCarListCompleted(this, new GetLastUpdateTimeForCarListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetCarBySerialXMLContent", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCarBySerialXMLContent() {
            object[] results = this.Invoke("GetCarBySerialXMLContent", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCarBySerialXMLContentAsync() {
            this.GetCarBySerialXMLContentAsync(null);
        }
        
        /// <remarks/>
        public void GetCarBySerialXMLContentAsync(object userState) {
            if ((this.GetCarBySerialXMLContentOperationCompleted == null)) {
                this.GetCarBySerialXMLContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCarBySerialXMLContentOperationCompleted);
            }
            this.InvokeAsync("GetCarBySerialXMLContent", new object[0], this.GetCarBySerialXMLContentOperationCompleted, userState);
        }
        
        private void OnGetCarBySerialXMLContentOperationCompleted(object arg) {
            if ((this.GetCarBySerialXMLContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCarBySerialXMLContentCompleted(this, new GetCarBySerialXMLContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetXMLContent", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXMLContent() {
            object[] results = this.Invoke("GetXMLContent", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXMLContentAsync() {
            this.GetXMLContentAsync(null);
        }
        
        /// <remarks/>
        public void GetXMLContentAsync(object userState) {
            if ((this.GetXMLContentOperationCompleted == null)) {
                this.GetXMLContentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXMLContentOperationCompleted);
            }
            this.InvokeAsync("GetXMLContent", new object[0], this.GetXMLContentOperationCompleted, userState);
        }
        
        private void OnGetXMLContentOperationCompleted(object arg) {
            if ((this.GetXMLContentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXMLContentCompleted(this, new GetXMLContentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetBrandToSerialForForeign", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBrandToSerialForForeign(out string xmlURL) {
            object[] results = this.Invoke("GetBrandToSerialForForeign", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrandToSerialForForeignAsync() {
            this.GetBrandToSerialForForeignAsync(null);
        }
        
        /// <remarks/>
        public void GetBrandToSerialForForeignAsync(object userState) {
            if ((this.GetBrandToSerialForForeignOperationCompleted == null)) {
                this.GetBrandToSerialForForeignOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrandToSerialForForeignOperationCompleted);
            }
            this.InvokeAsync("GetBrandToSerialForForeign", new object[0], this.GetBrandToSerialForForeignOperationCompleted, userState);
        }
        
        private void OnGetBrandToSerialForForeignOperationCompleted(object arg) {
            if ((this.GetBrandToSerialForForeignCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrandToSerialForForeignCompleted(this, new GetBrandToSerialForForeignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("WebServiceForPicMasterToSerial/GetLastUpdateTime", RequestNamespace="WebServiceForPicMasterToSerial", ResponseNamespace="WebServiceForPicMasterToSerial", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLastUpdateTime(out string xmlURL) {
            object[] results = this.Invoke("GetLastUpdateTime", new object[0]);
            xmlURL = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync() {
            this.GetLastUpdateTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetLastUpdateTimeAsync(object userState) {
            if ((this.GetLastUpdateTimeOperationCompleted == null)) {
                this.GetLastUpdateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLastUpdateTimeOperationCompleted);
            }
            this.InvokeAsync("GetLastUpdateTime", new object[0], this.GetLastUpdateTimeOperationCompleted, userState);
        }
        
        private void OnGetLastUpdateTimeOperationCompleted(object arg) {
            if ((this.GetLastUpdateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLastUpdateTimeCompleted(this, new GetLastUpdateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void DescriptionThisWebServiceCompletedEventHandler(object sender, DescriptionThisWebServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DescriptionThisWebServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DescriptionThisWebServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllSpellForMasterToCarCompletedEventHandler(object sender, GetAllSpellForMasterToCarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSpellForMasterToCarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSpellForMasterToCarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMasterToBrandToSerialUpdateTimeCompletedEventHandler(object sender, GetMasterToBrandToSerialUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterToBrandToSerialUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterToBrandToSerialUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventHandler(object sender, GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterToBrandToSerialAllSaleUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventHandler(object sender, GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterToBrandToSerialAllSaleAndLevelUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventHandler(object sender, GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMasterToBrandToSerialHasBlankBrandUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCarParameterConfigurationCompletedEventHandler(object sender, GetCarParameterConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarParameterConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarParameterConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCarParameterConfigurationXMLContentCompletedEventHandler(object sender, GetCarParameterConfigurationXMLContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarParameterConfigurationXMLContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarParameterConfigurationXMLContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetAllSerialYesterdayAndLastWeekSortCompletedEventHandler(object sender, GetAllSerialYesterdayAndLastWeekSortCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllSerialYesterdayAndLastWeekSortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllSerialYesterdayAndLastWeekSortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastUpdateTimeForCarListCompletedEventHandler(object sender, GetLastUpdateTimeForCarListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastUpdateTimeForCarListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastUpdateTimeForCarListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetCarBySerialXMLContentCompletedEventHandler(object sender, GetCarBySerialXMLContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCarBySerialXMLContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCarBySerialXMLContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetXMLContentCompletedEventHandler(object sender, GetXMLContentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXMLContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXMLContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetBrandToSerialForForeignCompletedEventHandler(object sender, GetBrandToSerialForForeignCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrandToSerialForForeignCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrandToSerialForForeignCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void GetLastUpdateTimeCompletedEventHandler(object sender, GetLastUpdateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLastUpdateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLastUpdateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string xmlURL {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591