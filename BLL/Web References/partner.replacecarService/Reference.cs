//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18052 版自动生成。
// 
#pragma warning disable 1591

namespace BitAuto.CarChannel.BLL.partner.replacecarService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReplaceCarServiceSoap", Namespace="http://bitauto.com/")]
    public partial class ReplaceCarService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddOrderOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ReplaceCarService() {
            this.Url = global::BitAuto.CarChannel.BLL.Properties.Settings.Default.BLL_com_bitauto_partner1_ReplaceCarService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AddOrderCompletedEventHandler AddOrderCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://bitauto.com/AddOrder", RequestNamespace="http://bitauto.com/", ResponseNamespace="http://bitauto.com/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddOrder(
                    string authorizeCode, 
                    int dealerId, 
                    int locationId, 
                    System.DateTime purchaseTime, 
                    string remark, 
                    int orderTypeId, 
                    string userAddress, 
                    int sex, 
                    string userIp, 
                    string email, 
                    string mobile, 
                    string phone, 
                    string userName, 
                    string postCode, 
                    string pageUrl, 
                    int carId, 
                    decimal carPrice, 
                    string carColor, 
                    string carFullName, 
                    string carPromotions, 
                    string carCustomParamers, 
                    int replacementCarId, 
                    short replacementCarBuyYear, 
                    short replacementCarBuyMonth, 
                    string replacementCarColor, 
                    int replacementLocationId, 
                    decimal replacementCarUsedMiles, 
                    decimal salePrice) {
            object[] results = this.Invoke("AddOrder", new object[] {
                        authorizeCode,
                        dealerId,
                        locationId,
                        purchaseTime,
                        remark,
                        orderTypeId,
                        userAddress,
                        sex,
                        userIp,
                        email,
                        mobile,
                        phone,
                        userName,
                        postCode,
                        pageUrl,
                        carId,
                        carPrice,
                        carColor,
                        carFullName,
                        carPromotions,
                        carCustomParamers,
                        replacementCarId,
                        replacementCarBuyYear,
                        replacementCarBuyMonth,
                        replacementCarColor,
                        replacementLocationId,
                        replacementCarUsedMiles,
                        salePrice});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddOrderAsync(
                    string authorizeCode, 
                    int dealerId, 
                    int locationId, 
                    System.DateTime purchaseTime, 
                    string remark, 
                    int orderTypeId, 
                    string userAddress, 
                    int sex, 
                    string userIp, 
                    string email, 
                    string mobile, 
                    string phone, 
                    string userName, 
                    string postCode, 
                    string pageUrl, 
                    int carId, 
                    decimal carPrice, 
                    string carColor, 
                    string carFullName, 
                    string carPromotions, 
                    string carCustomParamers, 
                    int replacementCarId, 
                    short replacementCarBuyYear, 
                    short replacementCarBuyMonth, 
                    string replacementCarColor, 
                    int replacementLocationId, 
                    decimal replacementCarUsedMiles, 
                    decimal salePrice) {
            this.AddOrderAsync(authorizeCode, dealerId, locationId, purchaseTime, remark, orderTypeId, userAddress, sex, userIp, email, mobile, phone, userName, postCode, pageUrl, carId, carPrice, carColor, carFullName, carPromotions, carCustomParamers, replacementCarId, replacementCarBuyYear, replacementCarBuyMonth, replacementCarColor, replacementLocationId, replacementCarUsedMiles, salePrice, null);
        }
        
        /// <remarks/>
        public void AddOrderAsync(
                    string authorizeCode, 
                    int dealerId, 
                    int locationId, 
                    System.DateTime purchaseTime, 
                    string remark, 
                    int orderTypeId, 
                    string userAddress, 
                    int sex, 
                    string userIp, 
                    string email, 
                    string mobile, 
                    string phone, 
                    string userName, 
                    string postCode, 
                    string pageUrl, 
                    int carId, 
                    decimal carPrice, 
                    string carColor, 
                    string carFullName, 
                    string carPromotions, 
                    string carCustomParamers, 
                    int replacementCarId, 
                    short replacementCarBuyYear, 
                    short replacementCarBuyMonth, 
                    string replacementCarColor, 
                    int replacementLocationId, 
                    decimal replacementCarUsedMiles, 
                    decimal salePrice, 
                    object userState) {
            if ((this.AddOrderOperationCompleted == null)) {
                this.AddOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddOrderOperationCompleted);
            }
            this.InvokeAsync("AddOrder", new object[] {
                        authorizeCode,
                        dealerId,
                        locationId,
                        purchaseTime,
                        remark,
                        orderTypeId,
                        userAddress,
                        sex,
                        userIp,
                        email,
                        mobile,
                        phone,
                        userName,
                        postCode,
                        pageUrl,
                        carId,
                        carPrice,
                        carColor,
                        carFullName,
                        carPromotions,
                        carCustomParamers,
                        replacementCarId,
                        replacementCarBuyYear,
                        replacementCarBuyMonth,
                        replacementCarColor,
                        replacementLocationId,
                        replacementCarUsedMiles,
                        salePrice}, this.AddOrderOperationCompleted, userState);
        }
        
        private void OnAddOrderOperationCompleted(object arg) {
            if ((this.AddOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddOrderCompleted(this, new AddOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void AddOrderCompletedEventHandler(object sender, AddOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591